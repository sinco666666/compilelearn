
;; Function print_message (print_message, funcdef_no=24, decl_uid=3954, cgraph_uid=25, symbol_order=24)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = NONLOCAL
CALLUSED(10) = callescape(9)
callarg(12) = &STRING
callarg(12) = callarg(12) + UNKNOWN
callarg(12) = *callarg(12) + UNKNOWN
CALLUSED(10) = callarg(12)
*callarg(12) = callescape(9)
CALLCLOBBERED(11) = callarg(12)
callescape(9) = callarg(12)
ESCAPED = &STRING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"puts";
"callescape(9)";
"CALLUSED(10)";
"CALLCLOBBERED(11)";
"callarg(12)"[label="callarg(12) = { 3 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*puts";
"*callescape(9)";
"*CALLUSED(10)";
"*CALLCLOBBERED(11)";
"*callarg(12)";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "callescape(9)";
"callarg(12)" -> "callescape(9)";
"callescape(9)" -> "CALLUSED(10)";
"callarg(12)" -> "CALLUSED(10)";
"callarg(12)" -> "CALLCLOBBERED(11)";
"NONLOCAL" -> "*ESCAPED";
"callescape(9)" -> "*callarg(12)";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"puts";
"callescape(9)";
"callarg(12)" [label="\N\ncallarg(12) = callarg(12) + UNKNOWN\lcallarg(12) = *callarg(12) + UNKNOWN\l*callarg(12) = callescape(9)\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "callescape(9)";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "callarg(12)";
"callarg(12)" -> "callescape(9)";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"puts";
"callescape(9)";
"callarg(12)" [label="\N\ncallarg(12) = callarg(12) + UNKNOWN\lcallarg(12) = *callarg(12) + UNKNOWN\l*callarg(12) = callescape(9)\l"];

  // Edges in the constraint graph:
"NONLOCAL" -> "callescape(9)";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "callarg(12)";
"callarg(12)" -> "callescape(9)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
puts = { }
callescape(9) = { STRING ESCAPED NONLOCAL }
CALLUSED(10) = { STRING ESCAPED NONLOCAL } same as callescape(9)
CALLCLOBBERED(11) = { STRING } same as callarg(12)
callarg(12) = { STRING }


Alias information for print_message

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void print_message ()
{
  <bb 2> [local count: 1073741824]:
  __builtin_puts (&"fundamentals of compiling"[0]);
  return;

}



;; Function add (add, funcdef_no=25, decl_uid=3957, cgraph_uid=26, symbol_order=25)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
b = &NONLOCAL
_3 = a + UNKNOWN
_3 = b + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"a"[label="a = { 5 }"];
"b"[label="b = { 5 }"];
"_3";
"add";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*a";
"*b";
"*_3";
"*add";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l"];
"_3";
"add";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"a" [label="\N\n_3 = a + UNKNOWN\l"];
"_3";
"add";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
b = { NONLOCAL } same as a
_3 = { NONLOCAL }
add = { }


Alias information for add

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
int add (int a, int b)
{
  int _3;

  <bb 2> [local count: 1073741824]:
  _3 = a_1(D) + b_2(D);
  return _3;

}



;; Function main (main, funcdef_no=26, decl_uid=3964, cgraph_uid=27, symbol_order=26) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = NONLOCAL
CALLUSED(10) = callescape(9)
callarg(12) = &STRING
callarg(12) = callarg(12) + UNKNOWN
callarg(12) = *callarg(12) + UNKNOWN
CALLUSED(10) = callarg(12)
*callarg(12) = callescape(9)
CALLCLOBBERED(11) = callarg(12)
callescape(9) = callarg(12)
ESCAPED = &STRING
callarg(13) = &n
callarg(13) = callarg(13) + UNKNOWN
callarg(13) = *callarg(13) + UNKNOWN
CALLUSED(10) = callarg(13)
*callarg(13) = callescape(9)
CALLCLOBBERED(11) = callarg(13)
callescape(9) = callarg(13)
ESCAPED = &n
n.0_24 = n
i_25 = i_17
i_25 = &NULL
arr$2_28 = _5
arr$2_28 = &NONLOCAL
_1 = arr$2_28
_2 = i_25 + UNKNOWN
_3 = _2 + UNKNOWN
_3 = &NONLOCAL
_4 = _1 + UNKNOWN
_4 = _3 + UNKNOWN
_5 = _4
i_17 = i_25 + UNKNOWN
i_17 = &NONLOCAL
arr$2_29 = _5
arr$2_29 = &NONLOCAL
callescape(26) = &NONLOCAL
CALLUSED(27) = callescape(26)
callarg(29) = &NONLOCAL
callarg(29) = callarg(29) + UNKNOWN
callarg(30) = &NONLOCAL
callarg(30) = callarg(30) + UNKNOWN
sum1_13 = &NONLOCAL
sum1_13 = callarg(29)
sum1_13 = callarg(30)
callescape(33) = NONLOCAL
CALLUSED(34) = callescape(33)
callescape(37) = NONLOCAL
CALLUSED(38) = callescape(37)
callarg(40) = &NONLOCAL
callarg(40) = callarg(40) + UNKNOWN
callarg(40) = *callarg(40) + UNKNOWN
CALLUSED(38) = callarg(40)
*callarg(40) = callescape(37)
CALLCLOBBERED(39) = callarg(40)
callescape(37) = callarg(40)
ESCAPED = &NONLOCAL
callarg(41) = &STRING
callarg(41) = callarg(41) + UNKNOWN
callarg(41) = *callarg(41) + UNKNOWN
CALLUSED(38) = callarg(41)
*callarg(41) = callescape(37)
CALLCLOBBERED(39) = callarg(41)
callescape(37) = callarg(41)
ESCAPED = &STRING
callarg(42) = sum1_13
callarg(42) = callarg(42) + UNKNOWN
callarg(42) = *callarg(42) + UNKNOWN
CALLUSED(38) = callarg(42)
*callarg(42) = callescape(37)
CALLCLOBBERED(39) = callarg(42)
callescape(37) = callarg(42)
ESCAPED = sum1_13
callescape(43) = NONLOCAL
CALLUSED(44) = callescape(43)
callarg(46) = &NONLOCAL
callarg(46) = callarg(46) + UNKNOWN
callarg(46) = *callarg(46) + UNKNOWN
CALLUSED(44) = callarg(46)
*callarg(46) = callescape(43)
CALLCLOBBERED(45) = callarg(46)
callescape(43) = callarg(46)
ESCAPED = &NONLOCAL
callarg(47) = &STRING
callarg(47) = callarg(47) + UNKNOWN
callarg(47) = *callarg(47) + UNKNOWN
CALLUSED(44) = callarg(47)
*callarg(47) = callescape(43)
CALLCLOBBERED(45) = callarg(47)
callescape(43) = callarg(47)
ESCAPED = &STRING
callarg(48) = &NONLOCAL
callarg(48) = callarg(48) + UNKNOWN
callarg(48) = *callarg(48) + UNKNOWN
CALLUSED(44) = callarg(48)
*callarg(48) = callescape(43)
CALLCLOBBERED(45) = callarg(48)
callescape(43) = callarg(48)
ESCAPED = &NONLOCAL
callescape(49) = NONLOCAL
CALLUSED(50) = callescape(49)
callarg(52) = &NONLOCAL
callarg(52) = callarg(52) + UNKNOWN
callarg(52) = *callarg(52) + UNKNOWN
CALLUSED(50) = callarg(52)
*callarg(52) = callescape(49)
CALLCLOBBERED(51) = callarg(52)
callescape(49) = callarg(52)
ESCAPED = &NONLOCAL
callarg(53) = &STRING
callarg(53) = callarg(53) + UNKNOWN
callarg(53) = *callarg(53) + UNKNOWN
CALLUSED(50) = callarg(53)
*callarg(53) = callescape(49)
CALLCLOBBERED(51) = callarg(53)
callescape(49) = callarg(53)
ESCAPED = &STRING
callarg(54) = &NONLOCAL
callarg(54) = callarg(54) + UNKNOWN
callarg(54) = *callarg(54) + UNKNOWN
CALLUSED(50) = callarg(54)
*callarg(54) = callescape(49)
CALLCLOBBERED(51) = callarg(54)
callescape(49) = callarg(54)
ESCAPED = &NONLOCAL
_7 = arr$2_29
callescape(56) = NONLOCAL
CALLUSED(57) = callescape(56)
callarg(59) = &NONLOCAL
callarg(59) = callarg(59) + UNKNOWN
callarg(59) = *callarg(59) + UNKNOWN
CALLUSED(57) = callarg(59)
*callarg(59) = callescape(56)
CALLCLOBBERED(58) = callarg(59)
callescape(56) = callarg(59)
ESCAPED = &NONLOCAL
callarg(60) = &STRING
callarg(60) = callarg(60) + UNKNOWN
callarg(60) = *callarg(60) + UNKNOWN
CALLUSED(57) = callarg(60)
*callarg(60) = callescape(56)
CALLCLOBBERED(58) = callarg(60)
callescape(56) = callarg(60)
ESCAPED = &STRING
callarg(61) = _7
callarg(61) = callarg(61) + UNKNOWN
callarg(61) = *callarg(61) + UNKNOWN
CALLUSED(57) = callarg(61)
*callarg(61) = callescape(56)
CALLCLOBBERED(58) = callarg(61)
callescape(56) = callarg(61)
ESCAPED = _7

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 8 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"n";
"*__isoc99_scanf";
"callescape(9)";
"CALLUSED(10)";
"CALLCLOBBERED(11)";
"callarg(12)"[label="callarg(12) = { 3 }"];
"callarg(13)"[label="callarg(13) = { 8 }"];
"n.0_24";
"i_25"[label="i_25 = { 1 }"];
"i_17"[label="i_17 = { 5 }"];
"arr$2_28"[label="arr$2_28 = { 5 }"];
"_5";
"_1";
"_2";
"_3"[label="_3 = { 5 }"];
"_4";
"arr$2_29"[label="arr$2_29 = { 5 }"];
"add";
"callescape(26)"[label="callescape(26) = { 5 }"];
"CALLUSED(27)";
"CALLCLOBBERED(28)";
"callarg(29)"[label="callarg(29) = { 5 }"];
"callarg(30)"[label="callarg(30) = { 5 }"];
"sum1_13"[label="sum1_13 = { 5 }"];
"print_message";
"callescape(33)";
"CALLUSED(34)";
"CALLCLOBBERED(35)";
"__printf_chk";
"callescape(37)";
"CALLUSED(38)";
"CALLCLOBBERED(39)";
"callarg(40)"[label="callarg(40) = { 5 }"];
"callarg(41)"[label="callarg(41) = { 3 }"];
"callarg(42)";
"callescape(43)";
"CALLUSED(44)";
"CALLCLOBBERED(45)";
"callarg(46)"[label="callarg(46) = { 5 }"];
"callarg(47)"[label="callarg(47) = { 3 }"];
"callarg(48)"[label="callarg(48) = { 5 }"];
"callescape(49)";
"CALLUSED(50)";
"CALLCLOBBERED(51)";
"callarg(52)"[label="callarg(52) = { 5 }"];
"callarg(53)"[label="callarg(53) = { 3 }"];
"callarg(54)"[label="callarg(54) = { 5 }"];
"_7";
"callescape(56)";
"CALLUSED(57)";
"CALLCLOBBERED(58)";
"callarg(59)"[label="callarg(59) = { 5 }"];
"callarg(60)"[label="callarg(60) = { 3 }"];
"callarg(61)";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*n";
"**__isoc99_scanf";
"*callescape(9)";
"*CALLUSED(10)";
"*CALLCLOBBERED(11)";
"*callarg(12)";
"*callarg(13)";
"*n.0_24";
"*i_25";
"*i_17";
"*arr$2_28";
"*_5";
"*_1";
"*_2";
"*_3";
"*_4";
"*arr$2_29";
"*add";
"*callescape(26)";
"*CALLUSED(27)";
"*CALLCLOBBERED(28)";
"*callarg(29)";
"*callarg(30)";
"*sum1_13";
"*print_message";
"*callescape(33)";
"*CALLUSED(34)";
"*CALLCLOBBERED(35)";
"*__printf_chk";
"*callescape(37)";
"*CALLUSED(38)";
"*CALLCLOBBERED(39)";
"*callarg(40)";
"*callarg(41)";
"*callarg(42)";
"*callescape(43)";
"*CALLUSED(44)";
"*CALLCLOBBERED(45)";
"*callarg(46)";
"*callarg(47)";
"*callarg(48)";
"*callescape(49)";
"*CALLUSED(50)";
"*CALLCLOBBERED(51)";
"*callarg(52)";
"*callarg(53)";
"*callarg(54)";
"*_7";
"*callescape(56)";
"*CALLUSED(57)";
"*CALLCLOBBERED(58)";
"*callarg(59)";
"*callarg(60)";
"*callarg(61)";
"*main";

  // Edges in the constraint graph:
"sum1_13" -> "ESCAPED";
"_7" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "callescape(9)";
"callarg(12)" -> "callescape(9)";
"callarg(13)" -> "callescape(9)";
"callescape(9)" -> "CALLUSED(10)";
"callarg(12)" -> "CALLUSED(10)";
"callarg(13)" -> "CALLUSED(10)";
"callarg(12)" -> "CALLCLOBBERED(11)";
"callarg(13)" -> "CALLCLOBBERED(11)";
"n" -> "n.0_24";
"i_17" -> "i_25";
"_5" -> "arr$2_28";
"_4" -> "_5";
"arr$2_28" -> "_1";
"_5" -> "arr$2_29";
"callescape(26)" -> "CALLUSED(27)";
"callarg(29)" -> "sum1_13";
"callarg(30)" -> "sum1_13";
"NONLOCAL" -> "callescape(33)";
"callescape(33)" -> "CALLUSED(34)";
"NONLOCAL" -> "callescape(37)";
"callarg(40)" -> "callescape(37)";
"callarg(41)" -> "callescape(37)";
"callarg(42)" -> "callescape(37)";
"callescape(37)" -> "CALLUSED(38)";
"callarg(40)" -> "CALLUSED(38)";
"callarg(41)" -> "CALLUSED(38)";
"callarg(42)" -> "CALLUSED(38)";
"callarg(40)" -> "CALLCLOBBERED(39)";
"callarg(41)" -> "CALLCLOBBERED(39)";
"callarg(42)" -> "CALLCLOBBERED(39)";
"sum1_13" -> "callarg(42)";
"NONLOCAL" -> "callescape(43)";
"callarg(46)" -> "callescape(43)";
"callarg(47)" -> "callescape(43)";
"callarg(48)" -> "callescape(43)";
"callescape(43)" -> "CALLUSED(44)";
"callarg(46)" -> "CALLUSED(44)";
"callarg(47)" -> "CALLUSED(44)";
"callarg(48)" -> "CALLUSED(44)";
"callarg(46)" -> "CALLCLOBBERED(45)";
"callarg(47)" -> "CALLCLOBBERED(45)";
"callarg(48)" -> "CALLCLOBBERED(45)";
"NONLOCAL" -> "callescape(49)";
"callarg(52)" -> "callescape(49)";
"callarg(53)" -> "callescape(49)";
"callarg(54)" -> "callescape(49)";
"callescape(49)" -> "CALLUSED(50)";
"callarg(52)" -> "CALLUSED(50)";
"callarg(53)" -> "CALLUSED(50)";
"callarg(54)" -> "CALLUSED(50)";
"callarg(52)" -> "CALLCLOBBERED(51)";
"callarg(53)" -> "CALLCLOBBERED(51)";
"callarg(54)" -> "CALLCLOBBERED(51)";
"arr$2_29" -> "_7";
"NONLOCAL" -> "callescape(56)";
"callarg(59)" -> "callescape(56)";
"callarg(60)" -> "callescape(56)";
"callarg(61)" -> "callescape(56)";
"callescape(56)" -> "CALLUSED(57)";
"callarg(59)" -> "CALLUSED(57)";
"callarg(60)" -> "CALLUSED(57)";
"callarg(61)" -> "CALLUSED(57)";
"callarg(59)" -> "CALLCLOBBERED(58)";
"callarg(60)" -> "CALLCLOBBERED(58)";
"callarg(61)" -> "CALLCLOBBERED(58)";
"_7" -> "callarg(61)";
"NONLOCAL" -> "*ESCAPED";
"callescape(9)" -> "*callarg(12)";
"callescape(9)" -> "*callarg(13)";
"callescape(37)" -> "*callarg(40)";
"callescape(37)" -> "*callarg(41)";
"callescape(37)" -> "*callarg(42)";
"callescape(43)" -> "*callarg(46)";
"callescape(43)" -> "*callarg(47)";
"callescape(43)" -> "*callarg(48)";
"callescape(49)" -> "*callarg(52)";
"callescape(49)" -> "*callarg(53)";
"callescape(49)" -> "*callarg(54)";
"callescape(56)" -> "*callarg(59)";
"callescape(56)" -> "*callarg(60)";
"callescape(56)" -> "*callarg(61)";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"*__isoc99_scanf";
"callescape(9)";
"CALLCLOBBERED(11)";
"callarg(12)" [label="\N\ncallarg(12) = callarg(12) + UNKNOWN\lcallarg(12) = *callarg(12) + UNKNOWN\l*callarg(12) = callescape(9)\l"];
"callarg(13)" [label="\N\ncallarg(13) = callarg(13) + UNKNOWN\lcallarg(13) = *callarg(13) + UNKNOWN\l*callarg(13) = callescape(9)\l"];
"n.0_24";
"i_25" [label="\N\ni_17 = i_25 + UNKNOWN\l_2 = i_25 + UNKNOWN\l"];
"i_17";
"arr$2_28" [label="\N\n_5 = arr$2_28 + UNKNOWN\l"];
"_5";
"_2" [label="\N\n_3 = _2 + UNKNOWN\l"];
"_3" [label="\N\n_5 = _3 + UNKNOWN\l"];
"add";
"callescape(26)";
"CALLCLOBBERED(28)";
"callarg(29)" [label="\N\ncallarg(29) = callarg(29) + UNKNOWN\l"];
"callarg(30)" [label="\N\ncallarg(30) = callarg(30) + UNKNOWN\l"];
"sum1_13";
"print_message";
"callescape(33)";
"CALLCLOBBERED(35)";
"__printf_chk";
"callescape(37)";
"CALLCLOBBERED(39)";
"callarg(40)" [label="\N\ncallarg(40) = callarg(40) + UNKNOWN\lcallarg(40) = *callarg(40) + UNKNOWN\l*callarg(40) = callescape(37)\l"];
"callarg(41)" [label="\N\ncallarg(41) = callarg(41) + UNKNOWN\lcallarg(41) = *callarg(41) + UNKNOWN\l*callarg(41) = callescape(37)\l"];
"callarg(42)" [label="\N\ncallarg(42) = callarg(42) + UNKNOWN\lcallarg(42) = *callarg(42) + UNKNOWN\l*callarg(42) = callescape(37)\l"];
"callescape(43)";
"CALLCLOBBERED(45)";
"callarg(46)" [label="\N\ncallarg(46) = callarg(46) + UNKNOWN\lcallarg(46) = *callarg(46) + UNKNOWN\l*callarg(46) = callescape(43)\l"];
"callarg(47)" [label="\N\ncallarg(47) = callarg(47) + UNKNOWN\lcallarg(47) = *callarg(47) + UNKNOWN\l*callarg(47) = callescape(43)\l"];
"callarg(48)" [label="\N\ncallarg(48) = callarg(48) + UNKNOWN\lcallarg(48) = *callarg(48) + UNKNOWN\l*callarg(48) = callescape(43)\l"];
"callescape(49)";
"CALLCLOBBERED(51)";
"callarg(52)" [label="\N\ncallarg(52) = callarg(52) + UNKNOWN\lcallarg(52) = *callarg(52) + UNKNOWN\l*callarg(52) = callescape(49)\l"];
"callarg(53)" [label="\N\ncallarg(53) = callarg(53) + UNKNOWN\lcallarg(53) = *callarg(53) + UNKNOWN\l*callarg(53) = callescape(49)\l"];
"callarg(54)" [label="\N\ncallarg(54) = callarg(54) + UNKNOWN\lcallarg(54) = *callarg(54) + UNKNOWN\l*callarg(54) = callescape(49)\l"];
"callescape(56)";
"CALLCLOBBERED(58)";
"callarg(59)" [label="\N\ncallarg(59) = callarg(59) + UNKNOWN\lcallarg(59) = *callarg(59) + UNKNOWN\l*callarg(59) = callescape(56)\l"];
"callarg(60)" [label="\N\ncallarg(60) = callarg(60) + UNKNOWN\lcallarg(60) = *callarg(60) + UNKNOWN\l*callarg(60) = callescape(56)\l"];
"callarg(61)" [label="\N\ncallarg(61) = callarg(61) + UNKNOWN\lcallarg(61) = *callarg(61) + UNKNOWN\l*callarg(61) = callescape(56)\l"];
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_24";
"STOREDANYTHING" -> "callarg(12)";
"STOREDANYTHING" -> "callarg(13)";
"STOREDANYTHING" -> "i_17";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "callarg(29)";
"STOREDANYTHING" -> "callarg(30)";
"STOREDANYTHING" -> "callarg(40)";
"STOREDANYTHING" -> "callarg(41)";
"STOREDANYTHING" -> "callarg(42)";
"STOREDANYTHING" -> "callarg(46)";
"STOREDANYTHING" -> "callarg(47)";
"STOREDANYTHING" -> "callarg(48)";
"STOREDANYTHING" -> "callarg(52)";
"STOREDANYTHING" -> "callarg(53)";
"STOREDANYTHING" -> "callarg(54)";
"STOREDANYTHING" -> "callarg(59)";
"STOREDANYTHING" -> "callarg(60)";
"STOREDANYTHING" -> "callarg(61)";
"callarg(12)" -> "callescape(9)";
"callarg(12)" -> "CALLCLOBBERED(11)";
"callarg(13)" -> "callescape(9)";
"callarg(13)" -> "CALLCLOBBERED(11)";
"i_17" -> "i_25";
"arr$2_28" -> "ESCAPED";
"arr$2_28" -> "callarg(61)";
"_5" -> "arr$2_28";
"callarg(29)" -> "sum1_13";
"callarg(30)" -> "sum1_13";
"sum1_13" -> "ESCAPED";
"sum1_13" -> "callarg(42)";
"callescape(33)" -> "callescape(9)";
"callescape(33)" -> "callescape(37)";
"callescape(33)" -> "callescape(43)";
"callescape(33)" -> "callescape(49)";
"callescape(33)" -> "callescape(56)";
"callarg(40)" -> "callescape(37)";
"callarg(40)" -> "CALLCLOBBERED(39)";
"callarg(41)" -> "callescape(37)";
"callarg(41)" -> "CALLCLOBBERED(39)";
"callarg(42)" -> "callescape(37)";
"callarg(42)" -> "CALLCLOBBERED(39)";
"callarg(46)" -> "callescape(43)";
"callarg(46)" -> "CALLCLOBBERED(45)";
"callarg(47)" -> "callescape(43)";
"callarg(47)" -> "CALLCLOBBERED(45)";
"callarg(48)" -> "callescape(43)";
"callarg(48)" -> "CALLCLOBBERED(45)";
"callarg(52)" -> "callescape(49)";
"callarg(52)" -> "CALLCLOBBERED(51)";
"callarg(53)" -> "callescape(49)";
"callarg(53)" -> "CALLCLOBBERED(51)";
"callarg(54)" -> "callescape(49)";
"callarg(54)" -> "CALLCLOBBERED(51)";
"callarg(59)" -> "callescape(56)";
"callarg(59)" -> "CALLCLOBBERED(58)";
"callarg(60)" -> "callescape(56)";
"callarg(60)" -> "CALLCLOBBERED(58)";
"callarg(61)" -> "callescape(56)";
"callarg(61)" -> "CALLCLOBBERED(58)";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = callescape(33)\l"];
"STOREDANYTHING";
"INTEGER";
"*__isoc99_scanf";
"callescape(9)";
"CALLCLOBBERED(11)";
"callarg(12)" [label="\N\ncallarg(12) = callarg(12) + UNKNOWN\lcallarg(12) = *callarg(12) + UNKNOWN\l*callarg(12) = callescape(9)\l"];
"callarg(13)" [label="\N\ncallarg(13) = callarg(13) + UNKNOWN\lcallarg(13) = *callarg(13) + UNKNOWN\l*callarg(13) = callescape(9)\l"];
"n.0_24";
"i_25" [label="\N\ni_17 = i_25 + UNKNOWN\l_2 = i_25 + UNKNOWN\l"];
"i_17";
"arr$2_28" [label="\N\n_5 = arr$2_28 + UNKNOWN\l"];
"_5";
"_2" [label="\N\n_3 = _2 + UNKNOWN\l"];
"_3" [label="\N\n_5 = _3 + UNKNOWN\l"];
"add";
"callescape(26)";
"CALLCLOBBERED(28)";
"callarg(29)" [label="\N\ncallarg(29) = callarg(29) + UNKNOWN\l"];
"callarg(30)" [label="\N\ncallarg(30) = callarg(30) + UNKNOWN\l"];
"sum1_13";
"print_message";
"callescape(33)";
"CALLCLOBBERED(35)";
"__printf_chk";
"callescape(37)";
"CALLCLOBBERED(39)";
"callarg(40)" [label="\N\ncallarg(40) = callarg(40) + UNKNOWN\lcallarg(40) = *callarg(40) + UNKNOWN\l*callarg(40) = callescape(37)\l"];
"callarg(41)" [label="\N\ncallarg(41) = callarg(41) + UNKNOWN\lcallarg(41) = *callarg(41) + UNKNOWN\l*callarg(41) = callescape(37)\l"];
"callarg(42)" [label="\N\ncallarg(42) = callarg(42) + UNKNOWN\lcallarg(42) = *callarg(42) + UNKNOWN\l*callarg(42) = callescape(37)\l"];
"callescape(43)";
"CALLCLOBBERED(45)";
"callarg(46)" [label="\N\ncallarg(46) = callarg(46) + UNKNOWN\lcallarg(46) = *callarg(46) + UNKNOWN\l*callarg(46) = callescape(43)\l"];
"callarg(47)" [label="\N\ncallarg(47) = callarg(47) + UNKNOWN\lcallarg(47) = *callarg(47) + UNKNOWN\l*callarg(47) = callescape(43)\l"];
"callarg(48)" [label="\N\ncallarg(48) = callarg(48) + UNKNOWN\lcallarg(48) = *callarg(48) + UNKNOWN\l*callarg(48) = callescape(43)\l"];
"callescape(49)";
"CALLCLOBBERED(51)";
"callarg(52)" [label="\N\ncallarg(52) = callarg(52) + UNKNOWN\lcallarg(52) = *callarg(52) + UNKNOWN\l*callarg(52) = callescape(49)\l"];
"callarg(53)" [label="\N\ncallarg(53) = callarg(53) + UNKNOWN\lcallarg(53) = *callarg(53) + UNKNOWN\l*callarg(53) = callescape(49)\l"];
"callarg(54)" [label="\N\ncallarg(54) = callarg(54) + UNKNOWN\lcallarg(54) = *callarg(54) + UNKNOWN\l*callarg(54) = callescape(49)\l"];
"callescape(56)";
"CALLCLOBBERED(58)";
"callarg(59)" [label="\N\ncallarg(59) = callarg(59) + UNKNOWN\lcallarg(59) = *callarg(59) + UNKNOWN\l*callarg(59) = callescape(56)\l"];
"callarg(60)" [label="\N\ncallarg(60) = callarg(60) + UNKNOWN\lcallarg(60) = *callarg(60) + UNKNOWN\l*callarg(60) = callescape(56)\l"];
"callarg(61)" [label="\N\ncallarg(61) = callarg(61) + UNKNOWN\lcallarg(61) = *callarg(61) + UNKNOWN\l*callarg(61) = callescape(56)\l"];
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.0_24";
"STOREDANYTHING" -> "callarg(12)";
"STOREDANYTHING" -> "callarg(13)";
"STOREDANYTHING" -> "i_17";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "callarg(29)";
"STOREDANYTHING" -> "callarg(30)";
"STOREDANYTHING" -> "callarg(40)";
"STOREDANYTHING" -> "callarg(41)";
"STOREDANYTHING" -> "callarg(42)";
"STOREDANYTHING" -> "callarg(46)";
"STOREDANYTHING" -> "callarg(47)";
"STOREDANYTHING" -> "callarg(48)";
"STOREDANYTHING" -> "callarg(52)";
"STOREDANYTHING" -> "callarg(53)";
"STOREDANYTHING" -> "callarg(54)";
"STOREDANYTHING" -> "callarg(59)";
"STOREDANYTHING" -> "callarg(60)";
"STOREDANYTHING" -> "callarg(61)";
"callescape(9)" -> "ESCAPED";
"callescape(9)" -> "n.0_24";
"callarg(12)" -> "callescape(9)";
"callarg(12)" -> "CALLCLOBBERED(11)";
"callarg(13)" -> "callescape(9)";
"callarg(13)" -> "CALLCLOBBERED(11)";
"n.0_24" -> "ESCAPED";
"n.0_24" -> "callarg(13)";
"i_17" -> "i_25";
"arr$2_28" -> "ESCAPED";
"arr$2_28" -> "callarg(61)";
"_5" -> "arr$2_28";
"callarg(29)" -> "sum1_13";
"callarg(30)" -> "sum1_13";
"sum1_13" -> "ESCAPED";
"sum1_13" -> "callarg(42)";
"callescape(33)" -> "ESCAPED";
"callescape(33)" -> "callescape(9)";
"callescape(33)" -> "n.0_24";
"callescape(33)" -> "callescape(37)";
"callescape(33)" -> "callarg(40)";
"callescape(33)" -> "callarg(42)";
"callescape(33)" -> "callescape(43)";
"callescape(33)" -> "callarg(46)";
"callescape(33)" -> "callarg(48)";
"callescape(33)" -> "callescape(49)";
"callescape(33)" -> "callarg(52)";
"callescape(33)" -> "callarg(54)";
"callescape(33)" -> "callescape(56)";
"callescape(33)" -> "callarg(59)";
"callescape(33)" -> "callarg(61)";
"callescape(37)" -> "ESCAPED";
"callarg(40)" -> "callescape(37)";
"callarg(40)" -> "CALLCLOBBERED(39)";
"callarg(41)" -> "callescape(37)";
"callarg(41)" -> "CALLCLOBBERED(39)";
"callarg(42)" -> "callescape(37)";
"callarg(42)" -> "CALLCLOBBERED(39)";
"callescape(43)" -> "ESCAPED";
"callarg(46)" -> "callescape(43)";
"callarg(46)" -> "CALLCLOBBERED(45)";
"callarg(47)" -> "callescape(43)";
"callarg(47)" -> "CALLCLOBBERED(45)";
"callarg(48)" -> "callescape(43)";
"callarg(48)" -> "CALLCLOBBERED(45)";
"callescape(49)" -> "ESCAPED";
"callarg(52)" -> "callescape(49)";
"callarg(52)" -> "CALLCLOBBERED(51)";
"callarg(53)" -> "callescape(49)";
"callarg(53)" -> "CALLCLOBBERED(51)";
"callarg(54)" -> "callescape(49)";
"callarg(54)" -> "CALLCLOBBERED(51)";
"callescape(56)" -> "ESCAPED";
"callarg(59)" -> "callescape(56)";
"callarg(59)" -> "CALLCLOBBERED(58)";
"callarg(60)" -> "callescape(56)";
"callarg(60)" -> "CALLCLOBBERED(58)";
"callarg(61)" -> "callescape(56)";
"callarg(61)" -> "CALLCLOBBERED(58)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL n }
NONLOCAL = { ESCAPED NONLOCAL } same as callescape(33)
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { STRING ESCAPED NONLOCAL n } same as n.0_24
*__isoc99_scanf = { }
callescape(9) = { STRING ESCAPED NONLOCAL n }
CALLUSED(10) = { STRING ESCAPED NONLOCAL n } same as callescape(9)
CALLCLOBBERED(11) = { STRING ESCAPED NONLOCAL n }
callarg(12) = { STRING }
callarg(13) = { STRING ESCAPED NONLOCAL n }
n.0_24 = { STRING ESCAPED NONLOCAL n }
i_25 = { NULL NONLOCAL }
i_17 = { NULL NONLOCAL }
arr$2_28 = { NULL NONLOCAL }
_5 = { NULL NONLOCAL }
_1 = { NULL NONLOCAL } same as arr$2_28
_2 = { NULL NONLOCAL }
_3 = { NULL NONLOCAL }
_4 = { NULL NONLOCAL } same as _5
arr$2_29 = { NULL NONLOCAL } same as arr$2_28
add = { }
callescape(26) = { NONLOCAL }
CALLUSED(27) = { NONLOCAL } same as callescape(26)
CALLCLOBBERED(28) = { }
callarg(29) = { NONLOCAL }
callarg(30) = { NONLOCAL }
sum1_13 = { NONLOCAL }
print_message = { }
callescape(33) = { ESCAPED NONLOCAL }
CALLUSED(34) = { ESCAPED NONLOCAL } same as callescape(33)
CALLCLOBBERED(35) = { }
__printf_chk = { }
callescape(37) = { STRING ESCAPED NONLOCAL }
CALLUSED(38) = { STRING ESCAPED NONLOCAL } same as callescape(37)
CALLCLOBBERED(39) = { STRING ESCAPED NONLOCAL }
callarg(40) = { ESCAPED NONLOCAL }
callarg(41) = { STRING }
callarg(42) = { ESCAPED NONLOCAL }
callescape(43) = { STRING ESCAPED NONLOCAL }
CALLUSED(44) = { STRING ESCAPED NONLOCAL } same as callescape(43)
CALLCLOBBERED(45) = { STRING ESCAPED NONLOCAL }
callarg(46) = { ESCAPED NONLOCAL }
callarg(47) = { STRING }
callarg(48) = { ESCAPED NONLOCAL }
callescape(49) = { STRING ESCAPED NONLOCAL }
CALLUSED(50) = { STRING ESCAPED NONLOCAL } same as callescape(49)
CALLCLOBBERED(51) = { STRING ESCAPED NONLOCAL }
callarg(52) = { ESCAPED NONLOCAL }
callarg(53) = { STRING }
callarg(54) = { ESCAPED NONLOCAL }
_7 = { NULL NONLOCAL } same as arr$2_28
callescape(56) = { NULL STRING ESCAPED NONLOCAL }
CALLUSED(57) = { NULL STRING ESCAPED NONLOCAL } same as callescape(56)
CALLCLOBBERED(58) = { NULL STRING ESCAPED NONLOCAL }
callarg(59) = { ESCAPED NONLOCAL }
callarg(60) = { STRING }
callarg(61) = { NULL ESCAPED NONLOCAL }
main = { }


Alias information for main

Aliased symbols

n, UID D.3967, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.3967 } (escaped)

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 6 4
;;
;; Loop 1
;;  header 3, latch 6
;;  depth 1, outer 0
;;  nodes: 3 6
;; 2 succs { 5 4 }
;; 5 succs { 3 }
;; 3 succs { 6 4 }
;; 6 succs { 3 }
;; 4 succs { 1 }
int main ()
{
  float arr$2;
  int sum1;
  int i;
  int n;
  double _1;
  double _2;
  double _3;
  double _4;
  float _5;
  double _7;
  int n.0_24;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &n);
  n.0_24 = n;
  if (n.0_24 >= 0)
    goto <bb 5>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 5> [local count: 105119324]:

  <bb 3> [local count: 955630225]:
  # i_25 = PHI <i_17(6), 0(5)>
  # arr$2_28 = PHI <_5(6), 0.0(5)>
  _1 = (double) arr$2_28;
  _2 = (double) i_25;
  _3 = _2 * 1.000000000000000055511151231257827021181583404541015625e-1;
  _4 = _1 + _3;
  _5 = (float) _4;
  i_17 = i_25 + 1;
  if (i_17 <= n.0_24)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 105119324]:
  goto <bb 4>; [100.00%]

  <bb 6> [local count: 850510901]:
  goto <bb 3>; [100.00%]

  <bb 7> [local count: 12992276]:

  <bb 4> [local count: 118111600]:
  # arr$2_29 = PHI <_5(8), 0.0(7)>
  sum1_13 = add (5, 7);
  print_message ();
  __printf_chk (2, "integer: %d\n", sum1_13);
  __printf_chk (2, "floating: %f\n", 3.140000000000000124344978758017532527446746826171875e+0);
  __printf_chk (2, "constant: %d\n", 42);
  _7 = (double) arr$2_29;
  __printf_chk (2, "sum2: %f\n", _7);
  n ={v} {CLOBBER(eol)};
  return 0;

}


