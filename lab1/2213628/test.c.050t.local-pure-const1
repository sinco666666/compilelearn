
;; Function printf (printf, funcdef_no=5, decl_uid=1743, cgraph_uid=6, symbol_order=5)



 local analysis of printf/5
   scanning: _4 = __printf_chk (2, __fmt_2(D), __builtin_va_arg_pack ());
  scanning: return _4;
Function is locally looping.
Function can locally free.
__attribute__((artificial, gnu_inline, always_inline))
__attribute__((nonnull (1), format (printf, 1, 2)))
int printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [local count: 1073741824]:
  _4 = __printf_chk (2, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function print_message (print_message, funcdef_no=24, decl_uid=3954, cgraph_uid=25, symbol_order=24)



 local analysis of print_message/24
   scanning: __printf_chk (2, "fundamentals of compiling\n");
  scanning: return;
Function is locally looping.
Function can locally free.
void print_message ()
{
  <bb 2> [local count: 1073741824]:
  __printf_chk (2, "fundamentals of compiling\n");
  return;

}



;; Function add (add, funcdef_no=25, decl_uid=3957, cgraph_uid=26, symbol_order=25)



 local analysis of add/25
   scanning: _3 = a_1(D) + b_2(D);
  scanning: return _3;
Function is locally const.
Function found to be const: add/25
Declaration updated to be const: add/25
int add (int a, int b)
{
  int _3;

  <bb 2> [local count: 1073741824]:
  _3 = a_1(D) + b_2(D);
  return _3;

}



;; Function main (main, funcdef_no=26, decl_uid=3964, cgraph_uid=27, symbol_order=26) (executed once)



 local analysis of main/26
   scanning: scanf ("%d", &n);
  scanning: _2 = (double) arr$2_21;
  scanning: _3 = (double) i_14;
  scanning: _4 = _3 * 1.000000000000000055511151231257827021181583404541015625e-1;
  scanning: _5 = _2 + _4;
  scanning: _6 = (float) _5;
  scanning: i_33 = i_14 + 1;
  scanning: n.0_7 = n;
  scanning: if (n.0_7 >= i_14)
  scanning: sum1_23 = add (5, 7);
  scanning: print_message ();
  scanning: __printf_chk (2, "integer: %d\n", sum1_23);
  scanning: __printf_chk (2, "floating: %f\n", 3.140000000000000124344978758017532527446746826171875e+0);
  scanning: __printf_chk (2, "constant: %d\n", 42);
  scanning: _13 = (double) arr$2_25;
  scanning: __printf_chk (2, "sum2: %f\n", _13);
  scanning: arr ={v} {CLOBBER(eol)};
  scanning: n ={v} {CLOBBER(eol)};
  scanning: return 0;
Function is locally looping.
Function can locally free.
int main ()
{
  float arr$2;
  float arr$1;
  float arr$0;
  int sum1;
  int i;
  int n;
  float arr[3];
  double _2;
  double _3;
  double _4;
  double _5;
  float _6;
  int n.0_7;
  double _13;

  <bb 2> [local count: 118111600]:
  scanf ("%d", &n);
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630225]:
  _2 = (double) arr$2_21;
  _3 = (double) i_14;
  _4 = _3 * 1.000000000000000055511151231257827021181583404541015625e-1;
  _5 = _2 + _4;
  _6 = (float) _5;
  i_33 = i_14 + 1;

  <bb 4> [local count: 1073741824]:
  # i_14 = PHI <0(2), i_33(3)>
  # arr$2_21 = PHI <0.0(2), _6(3)>
  n.0_7 = n;
  if (n.0_7 >= i_14)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111600]:
  # arr$2_25 = PHI <arr$2_21(4)>
  sum1_23 = add (5, 7);
  print_message ();
  __printf_chk (2, "integer: %d\n", sum1_23);
  __printf_chk (2, "floating: %f\n", 3.140000000000000124344978758017532527446746826171875e+0);
  __printf_chk (2, "constant: %d\n", 42);
  _13 = (double) arr$2_25;
  __printf_chk (2, "sum2: %f\n", _13);
  arr ={v} {CLOBBER(eol)};
  n ={v} {CLOBBER(eol)};
  return 0;

}


