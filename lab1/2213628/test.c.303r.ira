
;; Function print_message (print_message, funcdef_no=24, decl_uid=3954, cgraph_uid=25, symbol_order=24)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 82 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 82: (insn_list:REG_DEP_TRUE 5 (nil))

Pass 0 for finding pseudo/allocno costs

    a0 (r82,l0) best DIREG, allocno DIREG

  a0(r82,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:-1000,-1000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:23000,23000 INT_SSE_REGS:23000,23000 ALL_REGS:316000,316000 MEM:11000,11000


Pass 1 for finding pseudo/allocno costs

    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r82,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,-1000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:322000,322000 MEM:12000,12000

   Insn 7(l0): point = 0
   Insn 6(l0): point = 2
   Insn 5(l0): point = 4
 a0(r82): [3..4]
Compressing live ranges: from 7 to 2 - 28%
Ranges after the compression:
 a0(r82): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r82,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:


  pref0:a0(r82)<-hr5@1500
  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r82
    modified regnos: 82
    border:
    Pressure: GENERAL_REGS=1
    Hard reg set forest:
      0:( 0-6 8-15 20-51)@0
        1:( 0-6 36-43)@26000
      Allocno a0r82 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Forming thread from colorable bucket:
      Pushing a0(r82,l0)(cost 0)
      Popping a0(r82,l0)  --         assign reg 5
Disposition:
    0:r82  l0     5
New iteration of spill/restore move
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


print_message

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d,2u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} 
;;    total ref usage 98{88d,10u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 82)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)
        (nil)))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (reg/f:DI 82)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)
            (nil))))
(call_insn/j 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1017 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(barrier 8 7 0)

;; Function add (add, funcdef_no=25, decl_uid=3957, cgraph_uid=26, symbol_order=25)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 86: local to bb 2 def dominates all uses has unique first use
Reg 87 uninteresting
Found def insn 15 for 86 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    a1 (r87,l0) best SIREG, allocno SIREG
    a2 (r86,l0) best DIREG, allocno DIREG
    a0 (r85,l0) best AREG, allocno AREG

  a0(r85,l0) costs: AREG:-1000,-1000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000
  a1(r87,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:-1000,-1000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000
  a2(r86,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:-1000,-1000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000


Pass 1 for finding pseudo/allocno costs

    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r85,l0) costs: AREG:2000,-1000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000
  a1(r87,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,-1000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000
  a2(r86,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,-1000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000

   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 7(l0): point = 4
   Insn 16(l0): point = 6
   Insn 15(l0): point = 8
 a0(r85): [3..4]
 a1(r87): [5..6]
 a2(r86): [5..8]
Compressing live ranges: from 11 to 4 - 36%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r87): [2..3]
 a2(r86): [2..3]
+++Allocating 16 bytes for conflict table (uncompressed size 24)
;; a0(r85,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r87,l0) conflicts: a2(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r86,l0) conflicts: a1(r87,l0)
;;     total conflict hard regs: 4
;;     conflict hard regs: 4


  cp0:a0(r85)<->a2(r86)@125:shuffle
  cp1:a0(r85)<->a1(r87)@125:shuffle
  pref0:a1(r87)<-hr4@1500
  pref1:a2(r86)<-hr5@1500
  pref2:a0(r85)<-hr0@1500
  regions=1, blocks=3, points=4
    allocnos=3 (big 0), copies=2, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r85 1r87 2r86
    modified regnos: 85 86 87
    border:
    Pressure: GENERAL_REGS=2
    Hard reg set forest:
      0:( 0-6 8-15 20-51)@0
        1:( 0-6 36-43)@48000
          2:( 0-3 5-6 36-43)@24000
      Allocno a0r85 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a1r87 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a2r86 of GENERAL_REGS(15) has 14 avail. regs  0-3 5-6 36-43, node:  0-3 5-6 36-43 (confl regs =  4 7-35 44-75)
      Forming thread from colorable bucket:
        Forming thread by copy 0:a0r85-a2r86 (freq=125):
          Result (freq=4000): a0r85(2000) a2r86(2000)
      Pushing a1(r87,l0)(cost 0)
      Pushing a0(r85,l0)(cost 0)
      Pushing a2(r86,l0)(cost 0)
      Popping a2(r86,l0)  --         assign reg 5
      Popping a0(r85,l0)  --         assign reg 0
      Popping a1(r87,l0)  --         assign reg 4
Disposition:
    0:r85  l0     0    2:r86  l0     5    1:r87  l0     4
New iteration of spill/restore move
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


add

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={1d} r19={1d,2u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r85={1d,1u} r86={1d,1u} r87={1d,1u} 
;;    total ref usage 38{24d,14u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 15 5 2 2 (set (reg:SI 86)
        (reg:SI 5 di [ a ])) "test.c":15:23 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ a ])
        (nil)))
(note 2 15 16 2 NOTE_INSN_DELETED)
(insn 16 2 3 2 (set (reg:SI 87)
        (reg:SI 4 si [ b ])) "test.c":15:23 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ b ])
        (nil)))
(note 3 16 4 2 NOTE_INSN_DELETED)
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 12 2 (parallel [
            (set (reg:SI 85)
                (plus:SI (reg:SI 86)
                    (reg:SI 87)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":16:14 246 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 87)
        (expr_list:REG_DEAD (reg:SI 86)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 12 7 13 2 (set (reg/i:SI 0 ax)
        (reg:SI 85)) "test.c":17:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85)
        (nil)))
(insn 13 12 0 2 (use (reg/i:SI 0 ax)) "test.c":17:1 -1
     (nil))

;; Function main (main, funcdef_no=26, decl_uid=3964, cgraph_uid=27, symbol_order=26) (executed once)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 3 6 }
;; 3 succs { 4 }
;; 4 succs { 4 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 1 }
rescanning insn with uid = 49.
deleting insn with uid = 48.
Removing SCRATCH to p113 in insn #4 (nop 2)
rescanning insn with uid = 4.
Removing SCRATCH to p114 in insn #73 (nop 3)
rescanning insn with uid = 73.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
Reg 97 uninteresting
Reg 92 uninteresting
Reg 111: def dominates all uses has unique first use
Reg 98 uninteresting
Reg 99: local to bb 4 def dominates all uses has unique first use
Reg 101 uninteresting
Reg 102 uninteresting
Reg 112 uninteresting
Reg 90: local to bb 7 def dominates all uses has unique first use
Reg 103 uninteresting
Reg 105 uninteresting
Reg 106 uninteresting
Reg 107 uninteresting
Reg 108 uninteresting
Examining insn 39, def for 90
  all ok
Examining insn 26, def for 99
  all ok
Reg 111 not local to one basic block
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 4, latch 4
;;  depth 1, outer 0
;;  nodes: 4
;; 2 succs { 3 6 }
;; 3 succs { 4 }
;; 4 succs { 4 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 97: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 103: (insn_list:REG_DEP_TRUE 43 (nil))
init_insns for 105: (insn_list:REG_DEP_TRUE 50 (nil))
init_insns for 106: (insn_list:REG_DEP_TRUE 56 (nil))
init_insns for 108: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 111: (insn_list:REG_DEP_TRUE 90 (nil))
Reg 96 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a15 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r112,l0) best AREG, allocno AREG
    a19 (r111,l1) best SSE_REGS, allocno SSE_REGS
    a9 (r111,l0) best SSE_REGS, allocno SSE_REGS
    a1 (r108,l0) best SIREG, allocno SIREG
    a2 (r107,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    a4 (r106,l0) best SIREG, allocno SIREG
    a5 (r105,l0) best SIREG, allocno SIREG
    a6 (r103,l0) best SIREG, allocno SIREG
    a20 (r102,l1) best SSE_REGS, allocno SSE_REGS
    a21 (r101,l1) best SSE_REGS, allocno SSE_REGS
    a22 (r99,l1) best SSE_REGS, allocno SSE_REGS
    a23 (r98,l1) best SSE_REGS, allocno SSE_REGS
    a13 (r97,l0) best DIREG, allocno DIREG
    a14 (r96,l0) best SIREG, allocno SIREG
    a12 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a18 (r91,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best DREG, allocno DREG
    a17 (r87,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a11 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a16 (r86,l1) best SSE_REGS, allocno SSE_REGS
    a3 (r86,l0) best SSE_REGS, allocno SSE_REGS

  a0(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a1(r108,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2530,2530 INT_SSE_REGS:2530,2530 ALL_REGS:34760,34760 MEM:1210,1210
  a2(r107,l0) costs: AREG:1320,1320 DREG:1320,1320 CREG:1320,1320 BREG:1320,1320 SIREG:1320,1320 DIREG:1320,1320 AD_REGS:1320,1320 CLOBBERED_REGS:1320,1320 Q_REGS:1320,1320 NON_Q_REGS:1320,1320 TLS_GOTBASE_REGS:1320,1320 GENERAL_REGS:1320,1320 FP_TOP_REG:2860,2860 FP_SECOND_REG:2860,2860 FLOAT_REGS:2860,2860 SSE_FIRST_REG:-110,-110 NO_REX_SSE_REGS:220,220 SSE_REGS:220,220 FLOAT_SSE_REGS:2860,2860 FLOAT_INT_REGS:2860,2860 INT_SSE_REGS:2860,2860 FLOAT_INT_SSE_REGS:2860,2860 MEM:1320,1320
  a3(r86,l0) costs: AREG:878,11558 DREG:878,11558 CREG:878,11558 BREG:878,11558 SIREG:878,11558 DIREG:878,11558 AD_REGS:878,11558 CLOBBERED_REGS:878,11558 Q_REGS:878,11558 NON_Q_REGS:878,11558 TLS_GOTBASE_REGS:878,11558 GENERAL_REGS:878,11558 FP_TOP_REG:1532,18442 FP_SECOND_REG:1532,18442 FLOAT_REGS:1532,18442 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 MMX_REGS:1532,18442 FLOAT_SSE_REGS:1532,18442 FLOAT_INT_REGS:1532,18442 INT_SSE_REGS:1532,18442 FLOAT_INT_SSE_REGS:1532,18442 ALL_REGS:1532,18442 MEM:437,6667
  a4(r106,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2530,2530 INT_SSE_REGS:2530,2530 ALL_REGS:34760,34760 MEM:1210,1210
  a5(r105,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2530,2530 INT_SSE_REGS:2530,2530 ALL_REGS:34760,34760 MEM:1210,1210
  a6(r103,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2530,2530 INT_SSE_REGS:2530,2530 ALL_REGS:34760,34760 MEM:1210,1210
  a7(r90,l0) costs: AREG:220,220 DREG:-110,-110 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:880,880 NO_REX_SSE_REGS:880,880 SSE_REGS:880,880 MMX_REGS:2090,2090 INT_SSE_REGS:2090,2090 ALL_REGS:34320,34320 MEM:770,770
  a8(r112,l0) costs: AREG:-110,-110 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:880,880 NO_REX_SSE_REGS:880,880 SSE_REGS:880,880 MMX_REGS:2310,2310 INT_SSE_REGS:2310,2310 ALL_REGS:34540,34540 MEM:990,990
  a9(r111,l0) costs: AREG:194,5534 DREG:194,5534 CREG:194,5534 BREG:194,5534 SIREG:194,5534 DIREG:194,5534 AD_REGS:194,5534 CLOBBERED_REGS:194,5534 Q_REGS:194,5534 NON_Q_REGS:194,5534 TLS_GOTBASE_REGS:194,5534 GENERAL_REGS:194,5534 FP_TOP_REG:1164,12734 FP_SECOND_REG:1164,12734 FLOAT_REGS:1164,12734 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:1164,12734 FLOAT_INT_REGS:1164,12734 INT_SSE_REGS:1164,12734 FLOAT_INT_SSE_REGS:1164,12734 MEM:-582,3868
  a10(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:194,21554 NO_REX_SSE_REGS:194,21554 SSE_REGS:194,21554 MMX_REGS:582,40632 INT_SSE_REGS:582,40632 ALL_REGS:9700,664740 MEM:97,15227
  a11(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:582,5922 NO_REX_SSE_REGS:582,5922 SSE_REGS:582,5922 MMX_REGS:1261,12831 INT_SSE_REGS:1261,12831 ALL_REGS:20564,209244 MEM:485,4935
  a12(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:1462,1462 NO_REX_SSE_REGS:1462,1462 SSE_REGS:1462,1462 MMX_REGS:4011,4011 INT_SSE_REGS:4011,4011 ALL_REGS:55544,55544 MEM:1805,1805
  a13(r97,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:-110,-110 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2530,2530 INT_SSE_REGS:2530,2530 ALL_REGS:34760,34760 MEM:1210,1210
  a14(r96,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1320,1320
  a15(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a16(r86,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:16910,16910 FP_SECOND_REG:16910,16910 FLOAT_REGS:16910,16910 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 MMX_REGS:16910,16910 FLOAT_SSE_REGS:16910,16910 FLOAT_INT_REGS:16910,16910 INT_SSE_REGS:16910,16910 FLOAT_INT_SSE_REGS:16910,16910 ALL_REGS:16910,16910 MEM:6230,6230
  a17(r87,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:11570,11570 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:4450,4450
  a18(r91,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:21360,21360 NO_REX_SSE_REGS:21360,21360 SSE_REGS:21360,21360 MMX_REGS:40050,40050 INT_SSE_REGS:40050,40050 ALL_REGS:655040,655040 MEM:15130,15130
  a19(r111,l1) costs: AREG:5340,5340 DREG:5340,5340 CREG:5340,5340 BREG:5340,5340 SIREG:5340,5340 DIREG:5340,5340 AD_REGS:5340,5340 CLOBBERED_REGS:5340,5340 Q_REGS:5340,5340 NON_Q_REGS:5340,5340 TLS_GOTBASE_REGS:5340,5340 GENERAL_REGS:5340,5340 FP_TOP_REG:11570,11570 FP_SECOND_REG:11570,11570 FLOAT_REGS:11570,11570 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:11570,11570 FLOAT_INT_REGS:11570,11570 INT_SSE_REGS:11570,11570 FLOAT_INT_SSE_REGS:11570,11570 MEM:4450,4450
  a20(r102,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:16910,16910 FP_SECOND_REG:16910,16910 FLOAT_REGS:16910,16910 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:16910,16910 FLOAT_INT_REGS:16910,16910 INT_SSE_REGS:16910,16910 FLOAT_INT_SSE_REGS:16910,16910 MEM:6230,6230
  a21(r101,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:9790,9790
  a22(r99,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:9790,9790
  a23(r98,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_FIRST_REG:0,0 NO_REX_SSE_REGS:0,0 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:10680,10680


Pass 1 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r112: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r108: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    r106: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred SSE_REGS, alternative GENERAL_REGS, allocno INT_SSE_REGS
    r101: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r99: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative GENERAL_REGS, allocno INT_SSE_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r90: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r86: preferred SSE_REGS, alternative GENERAL_REGS, allocno INT_SSE_REGS

  a0(r114,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a1(r108,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35420,35420 MEM:1320,1320
  a2(r107,l0) costs: AREG:1320,1320 DREG:1320,1320 CREG:1320,1320 BREG:1320,1320 SIREG:1320,1320 DIREG:1320,1320 AD_REGS:1320,1320 CLOBBERED_REGS:1320,1320 Q_REGS:1320,1320 NON_Q_REGS:1320,1320 TLS_GOTBASE_REGS:1320,1320 GENERAL_REGS:1320,1320 FP_TOP_REG:2860,2860 FP_SECOND_REG:2860,2860 FLOAT_REGS:2860,2860 SSE_FIRST_REG:2860,-110 NO_REX_SSE_REGS:220,220 SSE_REGS:220,220 FLOAT_SSE_REGS:2860,2860 FLOAT_INT_REGS:2860,2860 INT_SSE_REGS:2860,2860 FLOAT_INT_SSE_REGS:2860,2860 MEM:1320,1320
  a3(r86,l0) costs: AREG:1314,11994 DREG:1314,11994 CREG:1314,11994 BREG:1314,11994 SIREG:1314,11994 DIREG:1314,11994 AD_REGS:1314,11994 CLOBBERED_REGS:1314,11994 Q_REGS:1314,11994 NON_Q_REGS:1314,11994 TLS_GOTBASE_REGS:1314,11994 GENERAL_REGS:1314,11994 FP_TOP_REG:2737,24987 FP_SECOND_REG:2737,24987 FLOAT_REGS:2737,24987 SSE_REGS:0,0 MMX_REGS:2737,24987 FLOAT_SSE_REGS:2737,24987 FLOAT_INT_REGS:2737,24987 INT_SSE_REGS:2737,24987 FLOAT_INT_SSE_REGS:2737,24987 ALL_REGS:2737,24987 MEM:1314,11994
  a4(r106,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35420,35420 MEM:1320,1320
  a5(r105,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35420,35420 MEM:1320,1320
  a6(r103,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35420,35420 MEM:1320,1320
  a7(r90,l0) costs: AREG:220,220 DREG:220,-110 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2750,2750 INT_SSE_REGS:2750,2750 ALL_REGS:34980,34980 MEM:1320,1320
  a8(r112,l0) costs: AREG:220,-110 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35860,35860 MEM:1210,1210
  a9(r111,l0) costs: AREG:582,5922 DREG:582,5922 CREG:582,5922 BREG:582,5922 SIREG:582,5922 DIREG:582,5922 AD_REGS:582,5922 CLOBBERED_REGS:582,5922 Q_REGS:582,5922 NON_Q_REGS:582,5922 TLS_GOTBASE_REGS:582,5922 GENERAL_REGS:582,5922 FP_TOP_REG:1261,12831 FP_SECOND_REG:1261,12831 FLOAT_REGS:1261,12831 SSE_REGS:0,0 FLOAT_SSE_REGS:1261,12831 FLOAT_INT_REGS:1261,12831 INT_SSE_REGS:1261,12831 FLOAT_INT_SSE_REGS:1261,12831 MEM:-582,3868
  a10(r91,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:582,21942 NO_REX_SSE_REGS:582,21942 SSE_REGS:582,21942 MMX_REGS:1164,46554 INT_SSE_REGS:1164,46554 ALL_REGS:10282,670662 MEM:582,20162
  a11(r87,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:582,5922 NO_REX_SSE_REGS:582,5922 SSE_REGS:582,5922 MMX_REGS:1261,12831 INT_SSE_REGS:1261,12831 ALL_REGS:20564,209244 MEM:485,4935
  a12(r92,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1902,1902 NO_REX_SSE_REGS:1902,1902 SSE_REGS:1902,1902 MMX_REGS:4121,4121 INT_SSE_REGS:4121,4121 ALL_REGS:56204,56204 MEM:1805,1805
  a13(r97,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:220,-110 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:35420,35420 MEM:1320,1320
  a14(r96,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1320,1320
  a15(r113,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a16(r86,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:22250,22250 FP_SECOND_REG:22250,22250 FLOAT_REGS:22250,22250 SSE_REGS:0,0 MMX_REGS:22250,22250 FLOAT_SSE_REGS:22250,22250 FLOAT_INT_REGS:22250,22250 INT_SSE_REGS:22250,22250 FLOAT_INT_SSE_REGS:22250,22250 ALL_REGS:22250,22250 MEM:10680,10680
  a17(r87,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:11570,11570 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:4450,4450
  a18(r91,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21360,21360 NO_REX_SSE_REGS:21360,21360 SSE_REGS:21360,21360 MMX_REGS:45390,45390 INT_SSE_REGS:45390,45390 ALL_REGS:660380,660380 MEM:19580,19580
  a19(r111,l1) costs: AREG:5340,5340 DREG:5340,5340 CREG:5340,5340 BREG:5340,5340 SIREG:5340,5340 DIREG:5340,5340 AD_REGS:5340,5340 CLOBBERED_REGS:5340,5340 Q_REGS:5340,5340 NON_Q_REGS:5340,5340 TLS_GOTBASE_REGS:5340,5340 GENERAL_REGS:5340,5340 FP_TOP_REG:11570,11570 FP_SECOND_REG:11570,11570 FLOAT_REGS:11570,11570 SSE_REGS:0,0 FLOAT_SSE_REGS:11570,11570 FLOAT_INT_REGS:11570,11570 INT_SSE_REGS:11570,11570 FLOAT_INT_SSE_REGS:11570,11570 MEM:4450,4450
  a20(r102,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:22250,22250 FP_SECOND_REG:22250,22250 FLOAT_REGS:22250,22250 SSE_REGS:0,0 FLOAT_SSE_REGS:22250,22250 FLOAT_INT_REGS:22250,22250 INT_SSE_REGS:22250,22250 FLOAT_INT_SSE_REGS:22250,22250 MEM:10680,10680
  a21(r101,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:9790,9790
  a22(r99,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:9790,9790
  a23(r98,l1) costs: AREG:10680,10680 DREG:10680,10680 CREG:10680,10680 BREG:10680,10680 SIREG:10680,10680 DIREG:10680,10680 AD_REGS:10680,10680 CLOBBERED_REGS:10680,10680 Q_REGS:10680,10680 NON_Q_REGS:10680,10680 TLS_GOTBASE_REGS:10680,10680 GENERAL_REGS:10680,10680 FP_TOP_REG:23140,23140 FP_SECOND_REG:23140,23140 FLOAT_REGS:23140,23140 SSE_REGS:0,0 FLOAT_SSE_REGS:23140,23140 FLOAT_INT_REGS:23140,23140 INT_SSE_REGS:23140,23140 FLOAT_INT_SSE_REGS:23140,23140 MEM:10680,10680

   Insn 79(l0): point = 0
   Insn 78(l0): point = 2
   Insn 75(l0): point = 5
   Insn 74(l0): point = 8
   Insn 73(l0): point = 10
   Insn 67(l0): point = 12
   Insn 66(l0): point = 14
   Insn 65(l0): point = 16
   Insn 64(l0): point = 18
   Insn 63(l0): point = 20
   Insn 62(l0): point = 22
   Insn 61(l0): point = 24
   Insn 60(l0): point = 26
   Insn 59(l0): point = 28
   Insn 58(l0): point = 30
   Insn 57(l0): point = 32
   Insn 56(l0): point = 34
   Insn 55(l0): point = 36
   Insn 54(l0): point = 38
   Insn 53(l0): point = 40
   Insn 52(l0): point = 42
   Insn 51(l0): point = 44
   Insn 50(l0): point = 46
   Insn 49(l0): point = 48
   Insn 47(l0): point = 50
   Insn 46(l0): point = 52
   Insn 45(l0): point = 54
   Insn 44(l0): point = 56
   Insn 43(l0): point = 58
   Insn 42(l0): point = 60
   Insn 41(l0): point = 62
   Insn 40(l0): point = 64
   Insn 39(l0): point = 66
   Insn 93(l0): point = 68
   Insn 38(l0): point = 70
   Insn 37(l0): point = 72
   Insn 36(l0): point = 74
   Insn 7(l0): point = 77
   Insn 95(l0): point = 80
   Insn 90(l0): point = 83
   Insn 6(l0): point = 85
   Insn 5(l0): point = 87
   Insn 22(l0): point = 89
   Insn 20(l0): point = 92
   Insn 19(l0): point = 94
   Insn 16(l0): point = 96
   Insn 15(l0): point = 98
   Insn 14(l0): point = 100
   Insn 13(l0): point = 102
   Insn 12(l0): point = 104
   Insn 11(l0): point = 106
   Insn 10(l0): point = 108
   Insn 4(l0): point = 110
   Insn 33(l1): point = 113
   Insn 32(l1): point = 115
   Insn 30(l1): point = 117
   Insn 29(l1): point = 119
   Insn 28(l1): point = 121
   Insn 27(l1): point = 123
   Insn 26(l1): point = 125
   Insn 24(l1): point = 127
 a0(r114): [10..10]
 a1(r108): [19..20]
 a2(r107): [23..24]
 a3(r86): [80..87] [25..77]
 a4(r106): [33..34]
 a5(r105): [45..46]
 a6(r103): [57..58]
 a7(r90): [61..66]
 a8(r112): [67..68]
 a9(r111): [83..83]
 a10(r91): [83..85]
 a11(r87): [83..89]
 a12(r92): [90..96]
 a13(r97): [103..104]
 a14(r96): [107..108]
 a15(r113): [110..110]
 a16(r86): [124..129] [113..119]
 a17(r87): [113..129]
 a18(r91): [113..129]
 a19(r111): [113..129]
 a20(r102): [120..121]
 a21(r101): [122..123]
 a22(r99): [122..125]
 a23(r98): [126..127]
      Moving ranges of a19r111 to a9r111:  [113..129]
 Rebuilding regno allocno list for 102
 Rebuilding regno allocno list for 101
 Rebuilding regno allocno list for 99
 Rebuilding regno allocno list for 98
      Moving ranges of a18r91 to a10r91:  [113..129]
      Moving ranges of a17r87 to a11r87:  [113..129]
      Moving ranges of a16r86 to a3r86:  [124..129] [113..119]
Compressing live ranges: from 130 to 35 - 26%
Ranges after the compression:
 a0(r114): [0..0]
 a1(r108): [1..2]
 a2(r107): [3..4]
 a3(r86): [31..34] [25..26] [5..17]
 a4(r106): [5..6]
 a5(r105): [7..8]
 a6(r103): [9..10]
 a7(r90): [11..12]
 a8(r112): [13..14]
 a9(r111): [25..34] [16..16]
 a10(r91): [25..34] [16..17]
 a11(r87): [25..34] [16..17]
 a12(r92): [18..19]
 a13(r97): [20..21]
 a14(r96): [22..23]
 a15(r113): [24..24]
 a20(r102): [27..28]
 a21(r101): [29..30]
 a22(r99): [29..32]
 a23(r98): [33..34]
+++Allocating 136 bytes for conflict table (uncompressed size 192)
;; a0(r114,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r108,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r107,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r86,l0) conflicts: a4(r106,l0) a5(r105,l0) a6(r103,l0) a7(r90,l0) a8(r112,l0) a9(r111,l0) a10(r91,l0) a11(r87,l0) a22(r99,l0) a23(r98,l0)
;;     total conflict hard regs: 0-1 4-5 20
;;     conflict hard regs: 0-1 4-5 20

;; a4(r106,l0) conflicts: a3(r86,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a5(r105,l0) conflicts: a3(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r103,l0) conflicts: a3(r86,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a7(r90,l0) conflicts: a3(r86,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a8(r112,l0) conflicts: a3(r86,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a9(r111,l0) conflicts: a3(r86,l0) a20(r102,l0) a21(r101,l0) a22(r99,l0) a23(r98,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a10(r91,l0) conflicts: a3(r86,l0) a11(r87,l0) a20(r102,l0) a23(r98,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a11(r87,l0) conflicts: a3(r86,l0) a10(r91,l0) a20(r102,l0) a23(r98,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a12(r92,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r97,l0) conflicts:
;;     total conflict hard regs: 4
;;     conflict hard regs: 4

;; a14(r96,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r113,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a20(r102,l0) conflicts: a9(r111,l0) a10(r91,l0) a11(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a21(r101,l0) conflicts: a9(r111,l0) a22(r99,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a22(r99,l0) conflicts: a3(r86,l0) a9(r111,l0) a21(r101,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a23(r98,l0) conflicts: a3(r86,l0) a9(r111,l0) a10(r91,l0) a11(r87,l0)
;;     total conflict hard regs:
;;     conflict hard regs:


  cp0:a7(r90)<->a8(r112)@110:move
  cp1:a2(r107)<->a3(r86)@13:shuffle
  cp2:a22(r99)<->a23(r98)@890:constraint
  cp3:a3(r86)<->a21(r101)@111:shuffle
  cp4:a20(r102)<->a22(r99)@890:constraint
  cp5:a20(r102)<->a21(r101)@890:constraint
  cp6:a3(r86)<->a20(r102)@111:shuffle
  cp7:a11(r87)<->a12(r92)@12:shuffle
  pref0:a8(r112)<-hr0@165
  pref1:a1(r108)<-hr4@165
  pref2:a2(r107)<-hr20@228
  pref3:a4(r106)<-hr4@165
  pref4:a5(r105)<-hr4@165
  pref5:a6(r103)<-hr4@165
  pref6:a13(r97)<-hr5@165
  pref7:a14(r96)<-hr4@165
  pref8:a7(r90)<-hr1@165
  regions=2, blocks=10, points=35
    allocnos=24 (big 0), copies=8, conflicts=0, ranges=25

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r114 1r108 2r107 3r86 4r106 5r105 6r103 7r90 8r112 9r111 10r91 11r87 12r92 13r97 14r96 15r113 20r102 21r101 22r99 23r98
    modified regnos: 86 87 90 91 92 96 97 98 99 101 102 103 105 106 107 108 111 112 113 114
    border:
    Pressure: GENERAL_REGS=5 SSE_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 20-51)@0
        1:( 0-6 20-27 36-51)@45580
          2:( 20-27 44-51)@46896
          3:( 0-6 36-43)@67664
            4:( 0 2-6 36-43)@5720
      Allocno a0r114 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a1r108 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a2r107 of INT_SSE_REGS(31) has 31 avail. regs  0-6 20-27 36-51, node:  0-6 20-27 36-51 (confl regs =  7-19 28-35 52-75)
      Allocno a3r86 of INT_SSE_REGS(31) has 21 avail. regs  3 6 21-27 40-51, ^node:  0-6 20-27 36-51 (confl regs =  0-1 4-5 7-20 28-35 52-75)
      Allocno a4r106 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 36-43, node:  0 2-6 36-43 (confl regs =  1 7-35 44-75)
      Allocno a5r105 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a6r103 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 36-43, node:  0 2-6 36-43 (confl regs =  1 7-35 44-75)
      Allocno a7r90 of GENERAL_REGS(15) has 7 avail. regs  1 3 6 40-43, ^node:  0-6 36-43 (confl regs =  0 7-35 44-75)
      Allocno a8r112 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a9r111 of SSE_REGS(16) has 16 avail. regs  20-27 44-51, node:  20-27 44-51 (confl regs =  0-19 28-43 52-75)
      Allocno a10r91 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a11r87 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a12r92 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a13r97 of GENERAL_REGS(15) has 14 avail. regs  0-3 5-6 36-43, ^node:  0-6 36-43 (confl regs =  4 7-35 44-75)
      Allocno a14r96 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a15r113 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a20r102 of INT_SSE_REGS(31) has 31 avail. regs  0-6 20-27 36-51, node:  0-6 20-27 36-51 (confl regs =  7-19 28-35 52-75)
      Allocno a21r101 of SSE_REGS(16) has 16 avail. regs  20-27 44-51, node:  20-27 44-51 (confl regs =  0-19 28-43 52-75)
      Allocno a22r99 of SSE_REGS(16) has 16 avail. regs  20-27 44-51, node:  20-27 44-51 (confl regs =  0-19 28-43 52-75)
      Allocno a23r98 of INT_SSE_REGS(31) has 31 avail. regs  0-6 20-27 36-51, node:  0-6 20-27 36-51 (confl regs =  7-19 28-35 52-75)
      Forming thread from colorable bucket:
        Forming thread by copy 2:a22r99-a23r98 (freq=890):
          Result (freq=3560): a22r99(1780) a23r98(1780)
        Forming thread by copy 4:a20r102-a22r99 (freq=890):
          Result (freq=5340): a20r102(1780) a22r99(1780) a23r98(1780)
        Forming thread by copy 3:a3r86-a21r101 (freq=111):
          Result (freq=3779): a3r86(1999) a21r101(1780)
        Forming thread by copy 0:a7r90-a8r112 (freq=110):
          Result (freq=440): a7r90(220) a8r112(220)
        Forming thread by copy 1:a2r107-a3r86 (freq=13):
          Result (freq=3999): a2r107(220) a3r86(1999) a21r101(1780)
        Forming thread by copy 7:a11r87-a12r92 (freq=12):
          Result (freq=1304): a11r87(987) a12r92(317)
      Pushing a15(r113,l0)(cost 0)
      Pushing a0(r114,l0)(cost 0)
      Pushing a14(r96,l0)(cost 0)
      Pushing a13(r97,l0)(cost 0)
      Pushing a6(r103,l0)(cost 0)
      Pushing a5(r105,l0)(cost 0)
      Pushing a4(r106,l0)(cost 0)
      Pushing a1(r108,l0)(cost 0)
      Pushing a8(r112,l0)(cost 0)
      Pushing a7(r90,l0)(cost 0)
      Pushing a9(r111,l0)(cost 0)
      Pushing a12(r92,l0)(cost 0)
      Pushing a11(r87,l0)(cost 0)
      Pushing a10(r91,l0)(cost 0)
      Pushing a2(r107,l0)(cost 0)
      Pushing a21(r101,l0)(cost 0)
      Pushing a3(r86,l0)(cost 0)
      Pushing a23(r98,l0)(cost 0)
      Pushing a20(r102,l0)(cost 0)
      Pushing a22(r99,l0)(cost 0)
      Popping a22(r99,l0)  --         assign reg 21
      Popping a20(r102,l0)  --         assign reg 21
      Popping a23(r98,l0)  --         assign reg 21
      Popping a3(r86,l0)  --         assign reg 22
      Popping a21(r101,l0)  --         assign reg 22
      Popping a2(r107,l0)  --         assign reg 20
      Popping a10(r91,l0)  --         assign reg 0
      Popping a11(r87,l0)  --         assign reg 1
      Popping a12(r92,l0)  --         assign reg 1
      Popping a9(r111,l0)  --         assign reg 20
      Popping a7(r90,l0)  --         assign reg 3
      Popping a8(r112,l0)  --         assign reg 0
      Popping a1(r108,l0)  --         assign reg 4
      Popping a4(r106,l0)  --         assign reg 4
      Popping a5(r105,l0)  --         assign reg 4
      Popping a6(r103,l0)  --         assign reg 4
      Popping a13(r97,l0)  --         assign reg 5
      Popping a14(r96,l0)  --         assign reg 4
      Popping a0(r114,l0)  --         assign reg 0
      Popping a15(r113,l0)  --         assign reg 0
Assigning 22 to a20r102
Disposition:
    3:r86  l0    22   11:r87  l0     1    7:r90  l0     3   10:r91  l0     0
   12:r92  l0     1   14:r96  l0     4   13:r97  l0     5   23:r98  l0    21
   22:r99  l0    21   21:r101 l0    22   20:r102 l0    22    6:r103 l0     4
    5:r105 l0     4    4:r106 l0     4    2:r107 l0    20    1:r108 l0     4
    9:r111 l0    20    8:r112 l0     0   15:r113 l0     0    0:r114 l0     0
New iteration of spill/restore move
+++Costs: overall 660, reg 660, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={16d,9u} r1={10d,2u} r2={8d} r4={14d,6u} r5={14d,6u} r6={1d,9u} r7={1d,17u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,8u} r17={15d,3u} r18={8d} r19={1d,13u,2e} r20={10d,2u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={8d} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r86={3d,2u} r87={1d,1u} r90={1d,1u} r91={2d,3u} r92={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d} r114={1d} 
;;    total ref usage 675{576d,97u,2e} in 61{53 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 2 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.4018+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 113)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "test.c":19:12 1382 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 113)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 10 4 11 2 (parallel [
            (set (reg/f:DI 96)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg/f:DI 96)) "test.c":26:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 97)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)) "test.c":26:5 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 97)) "test.c":26:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)
            (nil))))
(insn 14 13 15 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":26:5 85 {*movqi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test.c":26:5 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 16 15 19 2 (set (reg:SI 92 [ n.0_24 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "test.c":29:14 83 {*movsi_internal}
     (nil))
(insn 19 16 20 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 92 [ n.0_24 ])
            (const_int 0 [0]))) "test.c":29:14 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 85)
            (pc))) "test.c":29:14 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 85)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 5 3 (parallel [
            (set (reg:SI 87 [ _6 ])
                (plus:SI (reg:SI 92 [ n.0_24 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 246 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ n.0_24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 5 22 6 3 (set (reg:SF 86 [ arr$2 ])
        (const_double:SF 0.0 [0x0.0p+0])) "test.c":23:12 146 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 6 5 90 3 (set (reg/v:SI 91 [ i ])
        (const_int 0 [0])) "test.c":28:9 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 90 6 31 3 (set (reg:DF 111)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) 145 {*movdf_internal}
     (expr_list:REG_EQUIV (const_double:DF 1.00000000000000005551115123125782702118158340454101562e-1 [0x0.ccccccccccccdp-3])
        (nil)))
(code_label 31 90 23 4 6 (nil) [1 uses])
(note 23 31 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 26 4 (set (reg:DF 98)
        (float:DF (reg/v:SI 91 [ i ]))) "test.c":30:21 222 {*floatsidf2}
     (nil))
(insn 26 24 27 4 (set (reg:DF 99)
        (mult:DF (reg:DF 98)
            (reg:DF 111))) "test.c":30:21 1188 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 98)
        (nil)))
(insn 27 26 28 4 (set (reg:DF 101)
        (float_extend:DF (reg:SF 86 [ arr$2 ]))) "test.c":30:12 176 {*extendsfdf2}
     (expr_list:REG_DEAD (reg:SF 86 [ arr$2 ])
        (nil)))
(insn 28 27 29 4 (set (reg:DF 102)
        (plus:DF (reg:DF 99)
            (reg:DF 101))) "test.c":30:16 1188 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 101)
        (expr_list:REG_DEAD (reg:DF 99)
            (nil))))
(insn 29 28 30 4 (set (reg:SF 86 [ arr$2 ])
        (float_truncate:SF (reg:DF 102))) "test.c":30:16 182 {truncdfsf2}
     (expr_list:REG_DEAD (reg:DF 102)
        (nil)))
(insn 30 29 32 4 (parallel [
            (set (reg/v:SI 91 [ i ])
                (plus:SI (reg/v:SI 91 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":31:10 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 30 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _6 ])
            (reg/v:SI 91 [ i ]))) "test.c":29:14 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 94 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 31)
            (pc))) "test.c":29:14 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 31)
(note 94 33 95 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 95 94 96 5 (set (pc)
        (label_ref 34)) 996 {jump}
     (nil)
 -> 34)
(barrier 96 95 85)
(code_label 85 96 84 6 8 (nil) [1 uses])
(note 84 85 7 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 7 84 34 6 (set (reg:SF 86 [ arr$2 ])
        (const_double:SF 0.0 [0x0.0p+0])) "test.c":23:12 146 {*movsf_internal}
     (nil))
(code_label 34 7 35 7 5 (nil) [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(insn 37 36 38 7 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(call_insn/u 38 37 93 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>) [0 add S1 A8])
            (const_int 0 [0]))) "test.c":34:16 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 93 38 39 7 (set (reg:SI 112)
        (reg:SI 0 ax)) "test.c":34:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 39 93 40 7 (set (reg/v:SI 90 [ sum1 ])
        (reg:SI 112)) "test.c":34:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 40 39 41 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":36:5 85 {*movqi_internal}
     (nil))
(call_insn 41 40 42 7 (call (mem:QI (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>) [0 print_message S1 A8])
        (const_int 0 [0])) "test.c":36:5 1002 {*call}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 42 41 43 7 (set (reg:SI 1 dx)
        (reg/v:SI 90 [ sum1 ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 90 [ sum1 ])
        (nil)))
(insn 43 42 44 7 (set (reg/f:DI 103)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)
        (nil)))
(insn 44 43 45 7 (set (reg:DI 4 si)
        (reg/f:DI 103)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)
            (nil))))
(insn 45 44 46 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 47 46 49 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 49 47 50 7 (set (reg:DF 20 xmm0)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.140000000000000124344978758017532527446746826171875e+0 [0x0.c8f5c28f5c28f8p+2])
        (nil)))
(insn 50 49 51 7 (set (reg/f:DI 105)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)
        (nil)))
(insn 51 50 52 7 (set (reg:DI 4 si)
        (reg/f:DI 105)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)
            (nil))))
(insn 52 51 53 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 54 53 55 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:SI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 55 54 56 7 (set (reg:SI 1 dx)
        (const_int 42 [0x2a])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg/f:DI 106)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)
        (nil)))
(insn 57 56 58 7 (set (reg:DI 4 si)
        (reg/f:DI 106)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)
            (nil))))
(insn 58 57 59 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 59 58 60 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 60 59 61 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 61 60 62 7 (set (reg:DF 107)
        (float_extend:DF (reg:SF 86 [ arr$2 ]))) "test.c":40:5 176 {*extendsfdf2}
     (expr_list:REG_DEAD (reg:SF 86 [ arr$2 ])
        (nil)))
(insn 62 61 63 7 (set (reg:DF 20 xmm0)
        (reg:DF 107)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 107)
        (nil)))
(insn 63 62 64 7 (set (reg/f:DI 108)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)
        (nil)))
(insn 64 63 65 7 (set (reg:DI 4 si)
        (reg/f:DI 108)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)
            (nil))))
(insn 65 64 66 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 66 65 67 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 67 66 73 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:SI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 73 67 74 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.4018+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 114))
        ]) "test.c":43:1 1387 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 114)
        (nil)))
(jump_insn 74 73 86 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "test.c":43:1 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1073312332 (nil)))
 -> 77)
(note 86 74 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 75 86 76 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "test.c":43:1 1002 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(barrier 76 75 77)
(code_label 77 76 87 9 7 (nil) [1 uses])
(note 87 77 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 78 87 79 9 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) "test.c":43:1 83 {*movsi_internal}
     (nil))
(insn 79 78 0 9 (use (reg/i:SI 0 ax)) "test.c":43:1 -1
     (nil))
