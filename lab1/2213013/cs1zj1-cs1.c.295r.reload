
;; Function print_message (print_message, funcdef_no=6, decl_uid=2865, cgraph_uid=7, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 11: point = 0, n_alt = -1
  BB 2
   Insn 7: point = 0, n_alt = 0
   Insn 6: point = 0, n_alt = -2
   Insn 5: point = 1, n_alt = 4
 r82: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r82: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
starting the processing of deferred insns
ending the processing of deferred insns


print_message

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,1u} r6={1d,3u} r7={1d,4u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 97{87d,10u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 0 ax [82])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f26273f0a20 *.LC0>)) "cs1.c":18:5 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [82])) "cs1.c":18:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f26273f0a20 *.LC0>)
        (nil)))
(call_insn 7 6 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f26272be800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "cs1.c":18:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 10 7 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (const_int 0 [0]) "cs1.c":19:1 843 {nop}
     (nil))
(note 12 11 0 NOTE_INSN_DELETED)

;; Function add (add, funcdef_no=7, decl_uid=2868, cgraph_uid=8, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 9
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = 0
   Insn 8: point = 5, n_alt = 0
   Insn 7: point = 6, n_alt = 0
   Insn 3: point = 7, n_alt = 1
   Insn 2: point = 7, n_alt = 1
 r82: [2..3]
 r83: [0..1]
 r84: [4..6]
 r85: [4..5]
Compressing live ranges: from 7 to 6 - 85%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]
 r84: [4..5]
 r85: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


add

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r17={1d} r19={1d,1u,2e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 39{22d,15u,2e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "cs1.c":21:23 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (reg:SI 4 si [ b ])) "cs1.c":21:23 75 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 dx [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])) "cs1.c":22:14 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])) "cs1.c":22:14 75 {*movsi_internal}
     (nil))
(insn 9 8 17 2 (parallel [
            (set (reg:SI 0 ax [orig:82 _3 ] [82])
                (plus:SI (reg:SI 0 ax [85])
                    (reg:SI 1 dx [84])))
            (clobber (reg:CC 17 flags))
        ]) "cs1.c":22:14 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32]))
        (nil)))
(insn 17 9 19 2 (use (reg/i:SI 0 ax)) "cs1.c":23:1 -1
     (nil))
(note 19 17 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=8, decl_uid=2875, cgraph_uid=9, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 6:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 7:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 8:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 9:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 10:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 11:  (0) m  (1) v {*movsf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 22:  (0) v  (1) m {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) v  (1) v {*extendsfdf2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) v  (1) m {*floatsidf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 25:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 1 in insn 26:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 1 in insn 27:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) v  (1) v {truncdfsf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) v {fix_truncsfsi_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) v {fix_truncsfsi_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 55:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 56:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=628,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 66:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
          alt=2,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=3,overall=19,losers=2 -- refuse
	 Choosing alt 2 in insn 67:  (0) v  (1) v {*extendsfdf2}
      Creating newreg=118 from oldreg=94, assigning class ALL_SSE_REGS to r118
   67: r118:DF=float_extend(r93:SF)
      REG_DEAD r93:SF
    Inserting insn reload after:
  105: r94:DF=r118:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=14,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            alt=18,overall=17,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=20,overall=1,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 105:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 68:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 94: point = 0, n_alt = 0
  BB 7
   Insn 98: point = 0, n_alt = -1
   Insn 97: point = 0, n_alt = -2
  BB 5
   Insn 93: point = 2, n_alt = -1
   Insn 92: point = 2, n_alt = 0
   Insn 88: point = 4, n_alt = -2
   Insn 85: point = 6, n_alt = 0
   Insn 84: point = 7, n_alt = 0
   Insn 83: point = 7, n_alt = 3
   Insn 82: point = 7, n_alt = -2
   Insn 81: point = 8, n_alt = 4
   Insn 80: point = 9, n_alt = -2
   Insn 79: point = 10, n_alt = 0
   Insn 78: point = 11, n_alt = 0
   Insn 77: point = 11, n_alt = 3
   Insn 76: point = 11, n_alt = -2
   Insn 75: point = 12, n_alt = 4
   Insn 74: point = 13, n_alt = -2
   Insn 73: point = 14, n_alt = 0
   Insn 72: point = 15, n_alt = 0
   Insn 71: point = 15, n_alt = 3
   Insn 70: point = 15, n_alt = -2
   Insn 69: point = 16, n_alt = 4
   Insn 68: point = 17, n_alt = 21
   Insn 105: point = 18, n_alt = 20
	Hard reg 0 is preferable by r118 with profit 1000
   Insn 67: point = 20, n_alt = 2
   Insn 66: point = 22, n_alt = 7
   Insn 65: point = 23, n_alt = 0
   Insn 64: point = 23, n_alt = 3
   Insn 63: point = 23, n_alt = -2
   Insn 62: point = 24, n_alt = 4
   Insn 61: point = 25, n_alt = 0
   Insn 60: point = 25, n_alt = 0
   Insn 59: point = 25, n_alt = 3
   Insn 58: point = 25, n_alt = -2
   Insn 57: point = 26, n_alt = 4
   Insn 56: point = 27, n_alt = 21
   Insn 55: point = 28, n_alt = 8
   Insn 54: point = 29, n_alt = 0
   Insn 53: point = 29, n_alt = 3
   Insn 52: point = 29, n_alt = -2
   Insn 51: point = 30, n_alt = 4
   Insn 50: point = 31, n_alt = -2
   Insn 49: point = 32, n_alt = 0
   Insn 48: point = 33, n_alt = 0
   Insn 47: point = 33, n_alt = 3
   Insn 46: point = 33, n_alt = 1
   Insn 45: point = 34, n_alt = -2
   Insn 44: point = 35, n_alt = 0
   Insn 43: point = 35, n_alt = -2
   Insn 42: point = 36, n_alt = -2
   Insn 41: point = 37, n_alt = 0
   Insn 40: point = 39, n_alt = 7
   Insn 39: point = 40, n_alt = 0
   Insn 38: point = 42, n_alt = 7
  BB 4
   Insn 36: point = 43, n_alt = -1
   Insn 35: point = 43, n_alt = 0
   Insn 33: point = 44, n_alt = 0
  BB 2
   Insn 102: point = 45, n_alt = -1
   Insn 18: point = 45, n_alt = 1
   Insn 17: point = 45, n_alt = 0
   Insn 16: point = 45, n_alt = 3
   Insn 15: point = 45, n_alt = -2
   Insn 14: point = 46, n_alt = 4
   Insn 13: point = 47, n_alt = -2
   Insn 12: point = 48, n_alt = 3
   Insn 11: point = 49, n_alt = 8
   Insn 10: point = 50, n_alt = 7
   Insn 9: point = 51, n_alt = 8
   Insn 8: point = 52, n_alt = 7
   Insn 7: point = 53, n_alt = 8
   Insn 6: point = 54, n_alt = 7
   Insn 3: point = 55, n_alt = 0
  BB 3
   Insn 30: point = 57, n_alt = 0
   Insn 29: point = 57, n_alt = 8
   Insn 28: point = 58, n_alt = 2
   Insn 27: point = 60, n_alt = 1
   Insn 26: point = 62, n_alt = 1
   Insn 25: point = 64, n_alt = 14
   Insn 24: point = 65, n_alt = 2
   Insn 23: point = 66, n_alt = 2
   Insn 22: point = 68, n_alt = 7
 r82: [67..68]
 r83: [61..66]
 r84: [63..65]
 r85: [61..62]
 r86: [59..60]
 r87: [57..58]
 r88: [43..44]
 r89: [41..42]
 r90: [36..40]
 r91: [38..39]
 r92: [35..37]
 r93: [21..22]
 r94: [17..18]
 r95: [13..14]
 r96: [9..10]
 r97: [5..6]
 r98: [0..4]
 r99: [53..54]
 r100: [51..52]
 r101: [49..50]
 r102: [47..48]
 r103: [45..46]
 r104: [63..64]
 r105: [33..34]
 r106: [31..32]
 r107: [29..30]
 r108: [27..28]
 r109: [25..26]
 r110: [23..24]
 r111: [15..16]
 r112: [11..12]
 r113: [7..8]
 r115: [55..56]
 r116: [2..3]
 r118: [19..20]
Compressing live ranges: from 69 to 62 - 89%
Ranges after the compression:
 r82: [60..61]
 r83: [56..59]
 r84: [58..59]
 r85: [56..57]
 r86: [54..55]
 r87: [52..53]
 r88: [38..39]
 r89: [36..37]
 r90: [32..35]
 r91: [34..35]
 r92: [32..33]
 r93: [18..19]
 r94: [14..15]
 r95: [10..11]
 r96: [6..7]
 r97: [2..3]
 r98: [0..1]
 r99: [48..49]
 r100: [46..47]
 r101: [44..45]
 r102: [42..43]
 r103: [40..41]
 r104: [58..59]
 r105: [30..31]
 r106: [28..29]
 r107: [26..27]
 r108: [24..25]
 r109: [22..23]
 r110: [20..21]
 r111: [12..13]
 r112: [8..9]
 r113: [4..5]
 r115: [50..51]
 r116: [0..1]
 r118: [16..17]

********** Assignment #1: **********

	 Assigning to 118 (cl=ALL_SSE_REGS, orig=94, freq=2000, tfirst=118, tfreq=2000)...
	   Assign 23 to reload r118 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 80
changing reg in insn 85
changing reg in insn 88
changing reg in insn 88
changing reg in insn 97
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 25
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 3
changing reg in insn 92
deleting insn with uid = 45.
deleting insn with uid = 88.
deleting insn with uid = 97.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 94.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3]
;;  ref usage 	r0={36d,26u} r1={13d,1u} r2={11d} r4={17d,6u} r5={19d,8u} r6={1d,26u} r7={1d,17u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={15d,2u} r18={10d} r19={1d,1u} r20={24d,13u} r21={12d,1u} r22={12d,1u} r23={12d,1u} r24={11d} r25={11d} r26={11d} r27={11d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={11d} r37={11d} r38={10d} r39={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} 
;;    total ref usage 853{750d,103u,0e} in 79{69 regular + 10 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.2894+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [115])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "cs1.c":25:12 1159 {stack_protect_set_1_di}
     (nil))
(insn 6 3 7 2 (set (reg:SF 20 xmm0 [99])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "cs1.c":27:12 136 {*movsf_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 arr[0]+0 S4 A32])
        (reg:SF 20 xmm0 [99])) "cs1.c":27:12 136 {*movsf_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SF 20 xmm0 [100])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) "cs1.c":28:12 136 {*movsf_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 arr[1]+0 S4 A32])
        (reg:SF 20 xmm0 [100])) "cs1.c":28:12 136 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 20 xmm0 [101])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) "cs1.c":29:12 136 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 arr[2]+0 S4 A32])
        (reg:SF 20 xmm0 [101])) "cs1.c":29:12 136 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) "cs1.c":32:5 210 {*adddi_1}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [102])) "cs1.c":32:5 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [103])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f26270051b0 *.LC4>)) "cs1.c":32:5 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "cs1.c":32:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f26270051b0 *.LC4>)
        (nil)))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":32:5 77 {*movqi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7f26272bed00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "cs1.c":32:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 18 17 102 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "cs1.c":34:9 75 {*movsi_internal}
     (nil))
(jump_insn 102 18 103 2 (set (pc)
        (label_ref 31)) "cs1.c":35:11 807 {jump}
     (nil)
 -> 31)
(barrier 103 102 34)
(code_label 34 103 21 3 6 (nil) [1 uses])
(note 21 34 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SF 20 xmm0 [orig:82 _1 ] [82])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 arr[2]+0 S4 A32])) "cs1.c":36:16 136 {*movsf_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DF 21 xmm1 [orig:83 _2 ] [83])
        (float_extend:DF (reg:SF 20 xmm0 [orig:82 _1 ] [82]))) "cs1.c":36:16 156 {*extendsfdf2}
     (nil))
(insn 24 23 25 3 (set (reg:DF 22 xmm2 [orig:84 _3 ] [84])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32]))) "cs1.c":36:21 191 {*floatsidf2}
     (nil))
(insn 25 24 26 3 (set (reg:DF 20 xmm0 [104])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) "cs1.c":36:21 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.00000000000000005551115123125782702118158340454101562e-1 [0x0.ccccccccccccdp-3])
        (nil)))
(insn 26 25 27 3 (set (reg:DF 20 xmm0 [orig:85 _4 ] [85])
        (mult:DF (reg:DF 20 xmm0 [104])
            (reg:DF 22 xmm2 [orig:84 _3 ] [84]))) "cs1.c":36:21 981 {*fop_df_comm}
     (nil))
(insn 27 26 28 3 (set (reg:DF 20 xmm0 [orig:86 _5 ] [86])
        (plus:DF (reg:DF 20 xmm0 [orig:85 _4 ] [85])
            (reg:DF 21 xmm1 [orig:83 _2 ] [83]))) "cs1.c":36:16 981 {*fop_df_comm}
     (nil))
(insn 28 27 29 3 (set (reg:SF 20 xmm0 [orig:87 _6 ] [87])
        (float_truncate:SF (reg:DF 20 xmm0 [orig:86 _5 ] [86]))) "cs1.c":36:16 159 {truncdfsf2}
     (nil))
(insn 29 28 30 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 arr[2]+0 S4 A32])
        (reg:SF 20 xmm0 [orig:87 _6 ] [87])) "cs1.c":36:16 136 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "cs1.c":37:10 209 {*addsi_1}
     (nil))
(code_label 31 30 32 4 5 (nil) [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 35 4 (set (reg:SI 0 ax [orig:88 n.0_7 ] [88])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 n+0 S4 A64])) "cs1.c":35:14 75 {*movsi_internal}
     (nil))
(insn 35 33 36 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
            (reg:SI 0 ax [orig:88 n.0_7 ] [88]))) "cs1.c":35:14 11 {*cmpsi_1}
     (nil))
(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "cs1.c":35:14 806 {*jcc}
     (nil)
 -> 34)
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg:SF 20 xmm0 [orig:89 _8 ] [89])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 arr[1]+0 S4 A32])) "cs1.c":40:31 136 {*movsf_internal}
     (nil))
(insn 39 38 40 5 (set (reg:SI 1 dx [orig:90 _9 ] [90])
        (fix:SI (reg:SF 20 xmm0 [orig:89 _8 ] [89]))) "cs1.c":40:16 170 {fix_truncsfsi_sse}
     (nil))
(insn 40 39 41 5 (set (reg:SF 20 xmm0 [orig:91 _10 ] [91])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 arr[0]+0 S4 A32])) "cs1.c":40:23 136 {*movsf_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 0 ax [orig:92 _11 ] [92])
        (fix:SI (reg:SF 20 xmm0 [orig:91 _10 ] [91]))) "cs1.c":40:16 170 {fix_truncsfsi_sse}
     (nil))
(insn 42 41 43 5 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:90 _9 ] [90])) "cs1.c":40:16 75 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:92 _11 ] [92])) "cs1.c":40:16 75 {*movsi_internal}
     (nil))
(call_insn 44 43 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7f26273eb700 add>) [0 add S1 A8])
            (const_int 0 [0]))) "cs1.c":40:16 824 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 46 44 47 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 sum1+0 S4 A64])
        (reg:SI 0 ax [105])) "cs1.c":40:16 75 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":42:5 77 {*movqi_internal}
     (nil))
(call_insn 48 47 49 5 (call (mem:QI (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7f26273eb600 print_message>) [0 print_message S1 A8])
        (const_int 0 [0])) "cs1.c":42:5 813 {*call}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 49 48 50 5 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 sum1+0 S4 A64])) "cs1.c":43:5 75 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [106])) "cs1.c":43:5 75 {*movsi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:DI 0 ax [107])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f2627005240 *.LC6>)) "cs1.c":43:5 74 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "cs1.c":43:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f2627005240 *.LC6>)
        (nil)))
(insn 53 52 54 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":43:5 77 {*movqi_internal}
     (nil))
(call_insn 54 53 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":43:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 55 54 56 5 (set (reg:DF 0 ax [108])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) "cs1.c":44:5 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.140000000000000124344978758017532527446746826171875e+0 [0x0.c8f5c28f5c28f8p+2])
        (nil)))
(insn 56 55 57 5 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [108])) "cs1.c":44:5 135 {*movdf_internal}
     (nil))
(insn 57 56 58 5 (set (reg:DI 0 ax [109])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f26270052d0 *.LC8>)) "cs1.c":44:5 74 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "cs1.c":44:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f26270052d0 *.LC8>)
        (nil)))
(insn 59 58 60 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "cs1.c":44:5 77 {*movqi_internal}
     (nil))
(call_insn 60 59 61 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":44:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 61 60 62 5 (set (reg:SI 4 si)
        (const_int 42 [0x2a])) "cs1.c":45:5 75 {*movsi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 0 ax [110])
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f2627005360 *.LC9>)) "cs1.c":45:5 74 {*movdi_internal}
     (nil))
(insn 63 62 64 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) "cs1.c":45:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f2627005360 *.LC9>)
        (nil)))
(insn 64 63 65 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":45:5 77 {*movqi_internal}
     (nil))
(call_insn 65 64 66 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":45:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 66 65 67 5 (set (reg:SF 20 xmm0 [orig:93 _12 ] [93])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 arr[2]+0 S4 A32])) "cs1.c":46:29 136 {*movsf_internal}
     (nil))
(insn 67 66 105 5 (set (reg:DF 23 xmm3 [orig:94 _13 ] [94])
        (float_extend:DF (reg:SF 20 xmm0 [orig:93 _12 ] [93]))) "cs1.c":46:5 156 {*extendsfdf2}
     (nil))
(insn 105 67 68 5 (set (reg:DF 0 ax [orig:94 _13 ] [94])
        (reg:DF 23 xmm3 [orig:94 _13 ] [94])) "cs1.c":46:5 135 {*movdf_internal}
     (nil))
(insn 68 105 69 5 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:94 _13 ] [94])) "cs1.c":46:5 135 {*movdf_internal}
     (nil))
(insn 69 68 70 5 (set (reg:DI 0 ax [111])
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f26270053f0 *.LC10>)) "cs1.c":46:5 74 {*movdi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "cs1.c":46:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f26270053f0 *.LC10>)
        (nil)))
(insn 71 70 72 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "cs1.c":46:5 77 {*movqi_internal}
     (nil))
(call_insn 72 71 73 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":46:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 73 72 74 5 (set (reg:SI 0 ax [orig:95 qj.1_14 ] [95])
        (mem/c:SI (symbol_ref:DI ("qj") [flags 0x2]  <var_decl 0x7f2628cf6e10 qj>) [1 qj+0 S4 A32])) "cs1.c":47:5 75 {*movsi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:95 qj.1_14 ] [95])) "cs1.c":47:5 75 {*movsi_internal}
     (nil))
(insn 75 74 76 5 (set (reg:DI 0 ax [112])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f2627005480 *.LC11>)) "cs1.c":47:5 74 {*movdi_internal}
     (nil))
(insn 76 75 77 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) "cs1.c":47:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f2627005480 *.LC11>)
        (nil)))
(insn 77 76 78 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":47:5 77 {*movqi_internal}
     (nil))
(call_insn 78 77 79 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":47:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 79 78 80 5 (set (reg:SI 0 ax [orig:96 CONST.2_15 ] [96])
        (const_int 500 [0x1f4])) "cs1.c":48:5 75 {*movsi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:96 CONST.2_15 ] [96])) "cs1.c":48:5 75 {*movsi_internal}
     (nil))
(insn 81 80 82 5 (set (reg:DI 0 ax [113])
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f2627005510 *.LC12>)) "cs1.c":48:5 74 {*movdi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "cs1.c":48:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f2627005510 *.LC12>)
        (nil)))
(insn 83 82 84 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "cs1.c":48:5 77 {*movqi_internal}
     (nil))
(call_insn 84 83 85 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f26272be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "cs1.c":48:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 85 84 92 5 (set (reg:SI 0 ax [orig:97 _33 ] [97])
        (const_int 0 [0])) "cs1.c":50:12 75 {*movsi_internal}
     (nil))
(insn 92 85 93 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.2894+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [116]))
        ]) "cs1.c":51:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 93 92 100 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "cs1.c":51:1 806 {*jcc}
     (nil)
 -> 96)
(note 100 93 94 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 94 100 95 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f26273fb100 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "cs1.c":51:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 95 94 96)
(code_label 96 95 101 7 8 (nil) [1 uses])
(note 101 96 98 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 98 101 104 7 (use (reg/i:SI 0 ax)) "cs1.c":51:1 -1
     (nil))
(note 104 98 0 NOTE_INSN_DELETED)
