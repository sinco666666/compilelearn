
;; Function print_message (print_message, funcdef_no=24, decl_uid=3954, cgraph_uid=25, symbol_order=24)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 82)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (reg:DI 82)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)
        (nil)))
(call_insn/j 7 6 0 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1017 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Function add (add, funcdef_no=25, decl_uid=3957, cgraph_uid=26, symbol_order=25)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v:SI 83 [ a ])
        (reg:SI 5 di [ a ])) "test.c":15:23 83 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 84 [ b ])
        (reg:SI 4 si [ b ])) "test.c":15:23 83 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (parallel [
            (set (reg:SI 85)
                (plus:SI (reg/v:SI 83 [ a ])
                    (reg/v:SI 84 [ b ])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":16:14 246 {*addsi_1}
     (nil))
(insn 8 7 12 2 (set (reg:SI 82 [ <retval> ])
        (reg:SI 85)) "test.c":16:14 discrim 1 83 {*movsi_internal}
     (nil))
(insn 12 8 13 2 (set (reg/i:SI 0 ax)
        (reg:SI 82 [ <retval> ])) "test.c":17:1 83 {*movsi_internal}
     (nil))
(insn 13 12 0 2 (use (reg/i:SI 0 ax)) "test.c":17:1 -1
     (nil))

;; Function main (main, funcdef_no=26, decl_uid=3964, cgraph_uid=27, symbol_order=26) (executed once)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Splitting mode V6HF for copy lowering.
  Skipping mode V8BF for copy lowering.
  Skipping mode V8HF for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V16BF for copy lowering.
  Splitting mode V16HF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V32BF for copy lowering.
  Splitting mode V32HF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V64BF for copy lowering.
  Splitting mode V64HF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V128BF for copy lowering.
  Splitting mode V128HF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 95)
        (const_int 40 [0x28])) "test.c":19:12 82 {*movdi_internal}
     (nil))
(insn 4 3 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.4018+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (reg/f:DI 95) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "test.c":19:12 1382 {stack_protect_set_1_di}
     (nil))
(insn 10 4 11 2 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:5 247 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg:DI 96)) "test.c":26:5 82 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)) "test.c":26:5 82 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 97)) "test.c":26:5 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)
        (nil)))
(insn 14 13 15 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":26:5 85 {*movqi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test.c":26:5 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 16 15 19 2 (set (reg:SI 92 [ n.0_24 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "test.c":29:14 83 {*movsi_internal}
     (nil))
(insn 19 16 20 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 92 [ n.0_24 ])
            (const_int 0 [0]))) "test.c":29:14 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 85)
            (pc))) "test.c":29:14 995 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 85)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 5 3 (parallel [
            (set (reg:SI 87 [ _6 ])
                (plus:SI (reg:SI 92 [ n.0_24 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 246 {*addsi_1}
     (nil))
(insn 5 22 6 3 (set (reg:SF 86 [ arr$2 ])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "test.c":23:12 146 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 6 5 31 3 (set (reg/v:SI 91 [ i ])
        (const_int 0 [0])) "test.c":28:9 83 {*movsi_internal}
     (nil))
(code_label 31 6 23 4 6 (nil) [1 uses])
(note 23 31 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:DF 98)
        (float:DF (reg/v:SI 91 [ i ]))) "test.c":30:21 222 {*floatsidf2}
     (nil))
(insn 25 24 26 4 (set (reg:DF 100)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) "test.c":30:21 145 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.00000000000000005551115123125782702118158340454101562e-1 [0x0.ccccccccccccdp-3])
        (nil)))
(insn 26 25 27 4 (set (reg:DF 99)
        (mult:DF (reg:DF 98)
            (reg:DF 100))) "test.c":30:21 1188 {*fop_df_comm}
     (nil))
(insn 27 26 28 4 (set (reg:DF 101)
        (float_extend:DF (reg:SF 86 [ arr$2 ]))) "test.c":30:12 176 {*extendsfdf2}
     (nil))
(insn 28 27 29 4 (set (reg:DF 102)
        (plus:DF (reg:DF 99)
            (reg:DF 101))) "test.c":30:16 1188 {*fop_df_comm}
     (nil))
(insn 29 28 30 4 (set (reg:SF 86 [ arr$2 ])
        (float_truncate:SF (reg:DF 102))) "test.c":30:16 182 {truncdfsf2}
     (nil))
(insn 30 29 32 4 (parallel [
            (set (reg/v:SI 91 [ i ])
                (plus:SI (reg/v:SI 91 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":31:10 246 {*addsi_1}
     (nil))
(insn 32 30 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _6 ])
            (reg/v:SI 91 [ i ]))) "test.c":29:14 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 85 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "test.c":29:14 995 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 31)
      ; pc falls through to BB 6
(code_label 85 33 84 5 8 (nil) [1 uses])
(note 84 85 7 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 7 84 34 5 (set (reg:SF 86 [ arr$2 ])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) "test.c":23:12 146 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(code_label 34 7 35 6 5 (nil) [0 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(call_insn/u 38 37 39 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>) [0 add S1 A8])
            (const_int 0 [0]))) "test.c":34:16 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 39 38 40 6 (set (reg/v:SI 90 [ sum1 ])
        (reg:SI 0 ax)) "test.c":34:16 83 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":36:5 85 {*movqi_internal}
     (nil))
(call_insn 41 40 42 6 (call (mem:QI (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>) [0 print_message S1 A8])
        (const_int 0 [0])) "test.c":36:5 1002 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 42 41 43 6 (set (reg:SI 1 dx)
        (reg/v:SI 90 [ sum1 ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:DI 103)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:DI 4 si)
        (reg:DI 103)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)
        (nil)))
(insn 45 44 46 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 47 46 48 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 48 47 49 6 (set (reg:DF 104)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.140000000000000124344978758017532527446746826171875e+0 [0x0.c8f5c28f5c28f8p+2])
        (nil)))
(insn 49 48 50 6 (set (reg:DF 20 xmm0)
        (reg:DF 104)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 105)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:DI 4 si)
        (reg:DI 105)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)
        (nil)))
(insn 52 51 53 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 54 53 55 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 55 54 56 6 (set (reg:SI 1 dx)
        (const_int 42 [0x2a])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:DI 106)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:DI 4 si)
        (reg:DI 106)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)
        (nil)))
(insn 58 57 59 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 60 59 61 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 61 60 62 6 (set (reg:DF 107)
        (float_extend:DF (reg:SF 86 [ arr$2 ]))) "test.c":40:5 176 {*extendsfdf2}
     (nil))
(insn 62 61 63 6 (set (reg:DF 20 xmm0)
        (reg:DF 107)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (nil))
(insn 63 62 64 6 (set (reg:DI 108)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (nil))
(insn 64 63 65 6 (set (reg:DI 4 si)
        (reg:DI 108)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)
        (nil)))
(insn 65 64 66 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 67 66 68 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 68 67 72 6 (set (reg:SI 94 [ <retval> ])
        (const_int 0 [0])) "test.c":43:1 83 {*movsi_internal}
     (nil))
(insn 72 68 73 6 (set (reg/f:DI 110)
        (const_int 40 [0x28])) "test.c":43:1 82 {*movdi_internal}
     (nil))
(insn 73 72 74 6 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.4018+0 S8 A64])
                        (mem/v/f:DI (reg/f:DI 110) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "test.c":43:1 1387 {stack_protect_test_1_di}
     (nil))
(jump_insn 74 73 86 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "test.c":43:1 995 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 77)
(note 86 74 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 75 86 77 7 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "test.c":43:1 1002 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(code_label 77 75 87 8 7 (nil) [1 uses])
(note 87 77 78 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 78 87 79 8 (set (reg/i:SI 0 ax)
        (reg:SI 94 [ <retval> ])) "test.c":43:1 83 {*movsi_internal}
     (nil))
(insn 79 78 0 8 (use (reg/i:SI 0 ax)) "test.c":43:1 -1
     (nil))
