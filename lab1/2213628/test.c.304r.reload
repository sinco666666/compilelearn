
;; Function print_message (print_message, funcdef_no=24, decl_uid=3954, cgraph_uid=25, symbol_order=24)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) UBsBz {*sibcall_value}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0, n_alt = 0
   Insn 6: point = 0, n_alt = -2
   Insn 5: point = 1, n_alt = 4
 r82: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r82: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


print_message

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 5 [di] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 88{84d,4u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 7 2 (set (reg/f:DI 5 di [82])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7b1e432c2ea0 *.LC0>)
        (nil)))
(call_insn/j 7 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1017 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7b1e43531100 __builtin_puts>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function add (add, funcdef_no=25, decl_uid=3957, cgraph_uid=26, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) r  (2) le {*addsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = -2
   Insn 7: point = 1, n_alt = 3
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = -2
 r85: [0..1]
 r86: [2..4]
 r87: [2..3]
Compressing live ranges: from 5 to 4 - 80%
Ranges after the compression:
 r85: [0..1]
 r86: [2..3]
 r87: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 12
changing reg in insn 15
changing reg in insn 7
changing reg in insn 16
changing reg in insn 7
deleting insn with uid = 15.
deleting insn with uid = 16.
deleting insn with uid = 12.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


add

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 24{18d,6u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 5 3 2 NOTE_INSN_DELETED)
(note 3 2 4 2 NOTE_INSN_DELETED)
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 13 2 (parallel [
            (set (reg:SI 0 ax [85])
                (plus:SI (reg:SI 5 di [86])
                    (reg:SI 4 si [87])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":16:14 246 {*addsi_1}
     (nil))
(insn 13 7 17 2 (use (reg/i:SI 0 ax)) "test.c":17:1 -1
     (nil))
(note 17 13 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=26, decl_uid=3964, cgraph_uid=27, symbol_order=26) (executed once)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=624,losers=3,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=23,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2,overall=614,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=19,losers=1,rld_nregs=0
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) v  (1) C {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=28,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 90:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) v  (1) r {*floatsidf2}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
	 Choosing alt 1 in insn 26:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) v  (1) v {*extendsfdf2}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 1 in insn 28:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) v  (1) v {truncdfsf2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=624,losers=3,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=23,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2,overall=614,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=19,losers=1,rld_nregs=0
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) v  (1) C {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=616,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=625,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=30,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 49:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) v  (1) v {*extendsfdf2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=116, assigning class NO_REGS to save r116
   61: r107:DF=float_extend(r86:SF)
      REG_DEAD r86:SF
    Add reg<-save before:
   99: r86:SF=r116:SF

   35: NOTE_INSN_BASIC_BLOCK 7
    Add save<-reg after:
   98: r116:SF=r86:SF

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 8
   Insn 75: point = 0, n_alt = 0
  BB 9
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = 0
  BB 7
   Insn 74: point = 0, n_alt = -1
   Insn 73: point = 0, n_alt = 0
   Insn 67: point = 2, n_alt = 0
   Insn 66: point = 2, n_alt = 3
   Insn 65: point = 2, n_alt = 0
   Insn 64: point = 2, n_alt = -2
   Insn 63: point = 3, n_alt = 4
   Insn 62: point = 4, n_alt = -2
   Insn 61: point = 5, n_alt = 2
   Insn 99: point = 7, n_alt = -1
	Hard reg 22 is preferable by r116 with profit 110
   Insn 60: point = 9, n_alt = 0
   Insn 59: point = 9, n_alt = 3
   Insn 58: point = 9, n_alt = 0
   Insn 57: point = 9, n_alt = -2
   Insn 56: point = 10, n_alt = 4
   Insn 55: point = 11, n_alt = 0
   Insn 54: point = 11, n_alt = 0
   Insn 53: point = 11, n_alt = 3
   Insn 52: point = 11, n_alt = 0
   Insn 51: point = 11, n_alt = -2
   Insn 50: point = 12, n_alt = 4
   Insn 49: point = 13, n_alt = 14
   Insn 47: point = 13, n_alt = 0
   Insn 46: point = 13, n_alt = 3
   Insn 45: point = 13, n_alt = 0
   Insn 44: point = 13, n_alt = -2
   Insn 43: point = 14, n_alt = 4
   Insn 42: point = 15, n_alt = -2
   Insn 41: point = 16, n_alt = 0
   Insn 40: point = 16, n_alt = 3
   Insn 39: point = 16, n_alt = -2
   Insn 93: point = 18, n_alt = -2
   Insn 38: point = 19, n_alt = 0
   Insn 37: point = 19, n_alt = 0
   Insn 36: point = 19, n_alt = 0
   Insn 98: point = 19, n_alt = -1
	Hard reg 22 is preferable by r116 with profit 220
  BB 5
   Insn 95: point = 22, n_alt = -1
  BB 4
   Insn 33: point = 23, n_alt = -1
   Insn 32: point = 23, n_alt = 0
   Insn 30: point = 23, n_alt = 0
   Insn 29: point = 24, n_alt = 2
   Insn 28: point = 26, n_alt = 1
   Insn 27: point = 28, n_alt = 2
   Insn 26: point = 30, n_alt = 1
   Insn 24: point = 32, n_alt = 1
  BB 3
   Insn 90: point = 34, n_alt = 14
   Insn 6: point = 35, n_alt = 0
   Insn 5: point = 36, n_alt = 5
   Insn 22: point = 37, n_alt = 0
  BB 6
   Insn 7: point = 40, n_alt = 5
  BB 2
   Insn 20: point = 41, n_alt = -1
   Insn 19: point = 41, n_alt = 0
   Insn 16: point = 41, n_alt = 0
   Insn 15: point = 42, n_alt = 0
   Insn 14: point = 42, n_alt = 3
   Insn 13: point = 42, n_alt = -2
   Insn 12: point = 43, n_alt = 4
   Insn 11: point = 44, n_alt = -2
   Insn 10: point = 45, n_alt = 3
   Insn 4: point = 46, n_alt = 0
 r86: [40..40] [29..36] [20..24] [6..7]
 r87: [23..37]
 r90: [15..16]
 r91: [23..35]
 r92: [41..41] [38..39]
 r96: [44..45]
 r97: [42..43]
 r98: [31..32]
 r99: [27..30]
 r101: [27..28]
 r102: [25..26]
 r103: [13..14]
 r105: [11..12]
 r106: [9..10]
 r107: [4..5]
 r108: [2..3]
 r111: [23..34]
 r112: [17..18]
 r113: [46..47]
 r114: [0..1]
 r116: [8..19]
Compressing live ranges: from 48 to 38 - 79%
Ranges after the compression:
 r86: [30..30] [24..27] [18..19] [6..7]
 r87: [18..27]
 r90: [14..15]
 r91: [18..27]
 r92: [31..31] [28..29]
 r96: [34..35]
 r97: [32..33]
 r98: [26..27]
 r99: [22..25]
 r101: [22..23]
 r102: [20..21]
 r103: [12..13]
 r105: [10..11]
 r106: [8..9]
 r107: [4..5]
 r108: [2..3]
 r111: [18..27]
 r112: [16..17]
 r113: [36..37]
 r114: [0..1]
 r116: [8..17]

********** Assignment #1: **********


********** Undoing inheritance #1: **********

	     Keep split r116 (orig=r86)
Split 1 out of 1 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=624,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
          alt=4,overall=13,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=19,losers=2 -- refuse
            0 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 98:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=625,losers=2,rld_nregs=1
            alt=5: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=7,overall=1,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)

Cands:

BB 2:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
  changed regs: 0 [ax] 4 [si] 5 [di] 92 96 97 113
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 96 97

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 92
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 87 91 111
  changed regs: 86 87 91 111
  dead regs: 92

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 87 91 111
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86 87 91 111
  changed regs: 86 91 98 99 101 102
  dead regs: 17 [flags] 86 98 99 101 102

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
  changed regs:
  dead regs:

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
  changed regs: 86
  dead regs:

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame] 86
  register live out: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags] 20 [xmm0] 86 90 103 105 106 107 108 112 114 116
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 90 103 105 106 107 108 112 116

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 7 [sp] 16 [argp] 19 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
  changed regs: 0 [ax]
  dead regs:
subreg regs:
  Slot 0 regnos (width = 0):	 116
Changing spilled pseudos to memory in insn #98
Changing spilled pseudos to memory in insn #99
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=3,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=4,overall=28,losers=2,rld_nregs=1
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=12,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=21,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 98:  (0) m  (1) v {*movsf_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 29
changing reg in insn 5
changing reg in insn 61
changing reg in insn 27
changing reg in insn 22
changing reg in insn 32
changing reg in insn 39
changing reg in insn 42
changing reg in insn 30
changing reg in insn 6
changing reg in insn 32
changing reg in insn 30
changing reg in insn 24
changing reg in insn 16
changing reg in insn 22
changing reg in insn 19
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 43
changing reg in insn 44
changing reg in insn 50
changing reg in insn 51
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 90
changing reg in insn 26
changing reg in insn 93
changing reg in insn 39
changing reg in insn 4
changing reg in insn 73
deleting insn with uid = 11.
deleting insn with uid = 13.
deleting insn with uid = 93.
deleting insn with uid = 44.
deleting insn with uid = 51.
deleting insn with uid = 57.
deleting insn with uid = 62.
deleting insn with uid = 64.


try_optimize_cfg iteration 1

Forwarding edge 4->5 to 7 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 75.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 11 (  1.1)


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2]
;;  ref usage 	r0={20d,12u} r1={12d,5u} r2={8d} r3={1d,1u} r4={14d,6u} r5={14d,6u} r7={1d,23u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={15d,3u} r18={8d} r19={1e} r20={11d,3u} r21={10d,2u} r22={14d,5u} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={8d} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} 
;;    total ref usage 633{566d,66u,1e} in 55{47 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 2 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [2 D.4018+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [113])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "test.c":19:12 1382 {stack_protect_set_1_di}
     (nil))
(insn 10 4 12 2 (parallel [
            (set (reg/f:DI 4 si [96])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:5 247 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))
(insn 12 10 14 2 (set (reg/f:DI 5 di [97])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)) "test.c":26:5 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7b1e432d0bd0 *.LC2>)
        (nil)))
(insn 14 12 15 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":26:5 85 {*movqi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test.c":26:5 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7b1e43531600 scanf>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 16 15 19 2 (set (reg:SI 1 dx [orig:92 n.0_24 ] [92])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 20 [0x14])) [1 n+0 S4 A32])) "test.c":29:14 83 {*movsi_internal}
     (nil))
(insn 19 16 20 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 1 dx [orig:92 n.0_24 ] [92])
            (const_int 0 [0]))) "test.c":29:14 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 85)
            (pc))) "test.c":29:14 995 {*jcc}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 85)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 5 3 (parallel [
            (set (reg:SI 1 dx [orig:87 _6 ] [87])
                (plus:SI (reg:SI 1 dx [orig:92 n.0_24 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 246 {*addsi_1}
     (nil))
(insn 5 22 6 3 (set (reg:SF 22 xmm2 [orig:86 arr$2 ] [86])
        (const_double:SF 0.0 [0x0.0p+0])) "test.c":23:12 146 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 6 5 90 3 (set (reg/v:SI 0 ax [orig:91 i ] [91])
        (const_int 0 [0])) "test.c":28:9 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 90 6 31 3 (set (reg:DF 20 xmm0 [111])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S8 A64])) 145 {*movdf_internal}
     (expr_list:REG_EQUIV (const_double:DF 1.00000000000000005551115123125782702118158340454101562e-1 [0x0.ccccccccccccdp-3])
        (nil)))
(code_label 31 90 23 4 6 (nil) [1 uses])
(note 23 31 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 26 4 (set (reg:DF 21 xmm1 [98])
        (float:DF (reg/v:SI 0 ax [orig:91 i ] [91]))) "test.c":30:21 222 {*floatsidf2}
     (nil))
(insn 26 24 27 4 (set (reg:DF 21 xmm1 [99])
        (mult:DF (reg:DF 21 xmm1 [98])
            (reg:DF 20 xmm0 [111]))) "test.c":30:21 1188 {*fop_df_comm}
     (nil))
(insn 27 26 28 4 (set (reg:DF 22 xmm2 [101])
        (float_extend:DF (reg:SF 22 xmm2 [orig:86 arr$2 ] [86]))) "test.c":30:12 176 {*extendsfdf2}
     (nil))
(insn 28 27 29 4 (set (reg:DF 22 xmm2 [102])
        (plus:DF (reg:DF 22 xmm2 [101])
            (reg:DF 21 xmm1 [99]))) "test.c":30:16 1188 {*fop_df_comm}
     (nil))
(insn 29 28 30 4 (set (reg:SF 22 xmm2 [orig:86 arr$2 ] [86])
        (float_truncate:SF (reg:DF 22 xmm2 [102]))) "test.c":30:16 182 {truncdfsf2}
     (nil))
(insn 30 29 32 4 (parallel [
            (set (reg/v:SI 0 ax [orig:91 i ] [91])
                (plus:SI (reg/v:SI 0 ax [orig:91 i ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":31:10 246 {*addsi_1}
     (nil))
(insn 32 30 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:87 _6 ] [87])
            (reg/v:SI 0 ax [orig:91 i ] [91]))) "test.c":29:14 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 94 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 31)
            (pc))) "test.c":29:14 995 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 31)
(note 94 33 95 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 95 94 96 5 (set (pc)
        (label_ref 34)) 996 {jump}
     (nil)
 -> 34)
(barrier 96 95 85)
(code_label 85 96 84 6 8 (nil) [1 uses])
(note 84 85 7 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 7 84 34 6 (set (reg:SF 22 xmm2 [orig:86 arr$2 ] [86])
        (const_double:SF 0.0 [0x0.0p+0])) "test.c":23:12 146 {*movsf_internal}
     (nil))
(code_label 34 7 35 7 5 (nil) [1 uses])
(note 35 34 98 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 98 35 36 7 (set (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [4 %sfp+-20 S4 A32])
        (reg:SF 22 xmm2 [orig:86 arr$2 ] [86])) 146 {*movsf_internal}
     (nil))
(insn 36 98 37 7 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(insn 37 36 38 7 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(call_insn/u 38 37 39 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>) [0 add S1 A8])
            (const_int 0 [0]))) "test.c":34:16 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("add") [flags 0x3]  <function_decl 0x7b1e432a6e00 add>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 39 38 40 7 (set (reg/v:SI 3 bx [orig:90 sum1 ] [90])
        (reg:SI 0 ax [112])) "test.c":34:16 83 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":36:5 85 {*movqi_internal}
     (nil))
(call_insn 41 40 42 7 (call (mem:QI (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>) [0 print_message S1 A8])
        (const_int 0 [0])) "test.c":36:5 1002 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_message") [flags 0x3]  <function_decl 0x7b1e432a6d00 print_message>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 42 41 43 7 (set (reg:SI 1 dx)
        (reg/v:SI 3 bx [orig:90 sum1 ] [90])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 43 42 45 7 (set (reg/f:DI 4 si [103])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7b1e432d0c60 *.LC4>)
        (nil)))
(insn 45 43 46 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 47 46 49 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 49 47 50 7 (set (reg:DF 20 xmm0)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 145 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.140000000000000124344978758017532527446746826171875e+0 [0x0.c8f5c28f5c28f8p+2])
        (nil)))
(insn 50 49 52 7 (set (reg/f:DI 4 si [105])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7b1e432d0cf0 *.LC6>)
        (nil)))
(insn 52 50 53 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 54 53 55 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 55 54 56 7 (set (reg:SI 1 dx)
        (const_int 42 [0x2a])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 56 55 58 7 (set (reg/f:DI 4 si [106])
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7b1e432d0d80 *.LC7>)
        (nil)))
(insn 58 56 59 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 59 58 60 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 60 59 99 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 99 60 61 7 (set (reg:SF 22 xmm2 [orig:86 arr$2 ] [86])
        (mem/c:SF (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [4 %sfp+-20 S4 A32])) "test.c":40:5 146 {*movsf_internal}
     (nil))
(insn 61 99 63 7 (set (reg:DF 20 xmm0 [107])
        (float_extend:DF (reg:SF 22 xmm2 [orig:86 arr$2 ] [86]))) "test.c":40:5 176 {*extendsfdf2}
     (nil))
(insn 63 61 65 7 (set (reg/f:DI 4 si [108])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7b1e432d0e10 *.LC8>)
        (nil)))
(insn 65 63 66 7 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 66 65 67 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 67 66 73 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7b1e43559800 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(insn 73 67 74 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [2 D.4018+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 0 ax [114]))
        ]) "test.c":43:1 1387 {stack_protect_test_1_di}
     (nil))
(jump_insn 74 73 86 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "test.c":43:1 995 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 77)
(note 86 74 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 75 86 76 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "test.c":43:1 1002 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7b1e432b4d00 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(barrier 76 75 77)
(code_label 77 76 87 9 7 (nil) [1 uses])
(note 87 77 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 78 87 79 9 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) "test.c":43:1 83 {*movsi_internal}
     (nil))
(insn 79 78 97 9 (use (reg/i:SI 0 ax)) "test.c":43:1 -1
     (nil))
(note 97 79 0 NOTE_INSN_DELETED)
