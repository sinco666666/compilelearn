*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'cs1.ll'
source_filename = "cs1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@qj = dso_local global i32 100, align 4
@CONST = dso_local constant i32 500, align 4
@.str = private unnamed_addr constant [27 x i8] c"fundamentals of compiling\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"integer: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"floating: %f\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"constant: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"sum2: %f\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"global variable: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"constant integer: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare i32 @printf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'cs1.ll'
source_filename = "cs1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@qj = dso_local global i32 100, align 4
@CONST = dso_local constant i32 500, align 4
@.str = private unnamed_addr constant [27 x i8] c"fundamentals of compiling\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"integer: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"floating: %f\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"constant: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"sum2: %f\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"global variable: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"constant integer: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare i32 @printf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

# End machine code for function print_message.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr32 = COPY $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function print_message: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

bb.0 (%ir-block.0):
  %0:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %1:gr32 = COPY killed $eax
  RET64

# End machine code for function print_message.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY killed %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY killed %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY killed $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  %0:gr64 = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  $rdi = COPY %0:gr64
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  dead %1:gr32 = COPY $eax
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

0B	bb.0 (%ir-block.0):
16B	  renamable $rdi = MOV64ri @.str
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $al = MOV8ri 0
80B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  RET64

# End machine code for function print_message.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues

bb.0 (%ir-block.0):
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RET64

# End machine code for function print_message.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function print_message: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function print_message.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness

# End machine code for function add.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

; Loop:
10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

; Loop:
10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

; Loop:
10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

; Loop:
10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

; Exit blocks
24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x float], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 5.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 7.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0.000000e+00, float* %8, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %3)
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %14, %0
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp sle i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %4, align 4
  %16 = sitofp i32 %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call double @llvm.fmuladd.f64(double %16, double 1.000000e-01, double %19)
  %21 = fptrunc double %20 to float
  store float %21, float* %17, align 4
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %10, !llvm.loop !6

24:                                               ; preds = %10
  %25 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %26 = load float, float* %25, align 4
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %29 = load float, float* %28, align 4
  %30 = fptosi float %29 to i32
  %31 = call i32 @add(i32 noundef %27, i32 noundef %30)
  store i32 %31, i32* %5, align 4
  call void @print_message()
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 noundef %32)
  %34 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double noundef 3.140000e+00)
  %35 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 noundef 42)
  %36 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double noundef %38)
  %40 = load i32, i32* @qj, align 4
  %41 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 noundef %40)
  %42 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 noundef 500)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
448B	  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
464B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
480B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
496B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
512B	  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
528B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
544B	  JMP_1 %bb.1

560B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

576B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
592B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
624B	  $edi = COPY %40:gr32
640B	  $esi = COPY %38:gr32
656B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  %36:gr32 = COPY $eax
704B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
752B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
784B	  %29:gr64 = MOV64ri @.str.2
800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  $rdi = COPY %29:gr64
832B	  $esi = COPY %32:gr32
848B	  $al = MOV8ri 0
864B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
880B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  %31:gr32 = COPY $eax
912B	  %26:gr64 = MOV64ri @.str.3
928B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %26:gr64
976B	  $xmm0 = COPY %27:fr64
992B	  $al = MOV8ri 1
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  %28:gr32 = COPY $eax
1056B	  %23:gr64 = MOV64ri @.str.4
1072B	  %24:gr32 = MOV32ri 42
1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  $rdi = COPY %23:gr64
1120B	  $esi = COPY %24:gr32
1136B	  $al = MOV8ri 0
1152B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1168B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1184B	  %25:gr32 = COPY $eax
1200B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1216B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1232B	  %17:gr64 = MOV64ri @.str.5
1248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $rdi = COPY %17:gr64
1280B	  $xmm0 = COPY %21:fr64
1296B	  $al = MOV8ri 1
1312B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  %19:gr32 = COPY $eax
1360B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1376B	  %13:gr64 = MOV64ri @.str.6
1392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $rdi = COPY %13:gr64
1424B	  $esi = COPY %16:gr32
1440B	  $al = MOV8ri 0
1456B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1472B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  %15:gr32 = COPY $eax
1504B	  %10:gr64 = MOV64ri @.str.7
1520B	  %11:gr32 = MOV32ri 500
1536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = COPY %10:gr64
1568B	  $esi = COPY %11:gr32
1584B	  $al = MOV8ri 0
1600B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1616B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  %12:gr32 = COPY $eax
1648B	  %9:gr32 = MOV32r0 implicit-def $eflags
1664B	  $eax = COPY %9:gr32
1680B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
448B	  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
464B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
480B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
496B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
512B	  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
528B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
544B	  JMP_1 %bb.1

560B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

576B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
592B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
624B	  $edi = COPY %40:gr32
640B	  $esi = COPY %38:gr32
656B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
672B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  %36:gr32 = COPY $eax
704B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
752B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
784B	  %29:gr64 = MOV64ri @.str.2
800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  $rdi = COPY %29:gr64
832B	  $esi = COPY %32:gr32
848B	  $al = MOV8ri 0
864B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
880B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  %31:gr32 = COPY $eax
912B	  %26:gr64 = MOV64ri @.str.3
928B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %26:gr64
976B	  $xmm0 = COPY %27:fr64
992B	  $al = MOV8ri 1
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  %28:gr32 = COPY $eax
1056B	  %23:gr64 = MOV64ri @.str.4
1072B	  %24:gr32 = MOV32ri 42
1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  $rdi = COPY %23:gr64
1120B	  $esi = COPY %24:gr32
1136B	  $al = MOV8ri 0
1152B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1168B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1184B	  %25:gr32 = COPY $eax
1200B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1216B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1232B	  %17:gr64 = MOV64ri @.str.5
1248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1264B	  $rdi = COPY %17:gr64
1280B	  $xmm0 = COPY %21:fr64
1296B	  $al = MOV8ri 1
1312B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  %19:gr32 = COPY $eax
1360B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1376B	  %13:gr64 = MOV64ri @.str.6
1392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  $rdi = COPY %13:gr64
1424B	  $esi = COPY %16:gr32
1440B	  $al = MOV8ri 0
1456B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1472B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  %15:gr32 = COPY $eax
1504B	  %10:gr64 = MOV64ri @.str.7
1520B	  %11:gr32 = MOV32ri 500
1536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = COPY %10:gr64
1568B	  $esi = COPY %11:gr32
1584B	  $al = MOV8ri 0
1600B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1616B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1632B	  %12:gr32 = COPY $eax
1648B	  %9:gr32 = MOV32r0 implicit-def $eflags
1664B	  $eax = COPY %9:gr32
1680B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr %51:fr64(tied-def 0), %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 %44:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %40:gr32
  $esi = COPY %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %29:gr64
  $esi = COPY %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %26:gr64
  $xmm0 = COPY %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %28:gr32 = COPY $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %17:gr64
  $xmm0 = COPY %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr32 = COPY $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %13:gr64
  $esi = COPY %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %15:gr32 = COPY $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax
  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr killed %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr killed %51:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 killed %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr killed %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr killed %51:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 killed %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr killed %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr killed %51:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 killed %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = nofpexcept MULSDrr killed %56:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = nofpexcept ADDSDrr killed %51:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = ADD32ri8 killed %44:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = COPY killed %56:fr64
  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = COPY killed %51:fr64
  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = COPY killed %44:gr32
  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
  %3:fr32 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
  %0:gr64 = MOV64ri @.str.1
  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %0:gr64
  $rsi = COPY killed %1:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  %51:fr64 = COPY killed %56:fr64
  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
  %46:fr64 = COPY killed %51:fr64
  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %43:gr32 = COPY killed %44:gr32
  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %40:gr32
  $esi = COPY killed %38:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %36:gr32 = COPY killed $eax
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  %29:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %29:gr64
  $esi = COPY killed %32:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %31:gr32 = COPY killed $eax
  %26:gr64 = MOV64ri @.str.3
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %26:gr64
  $xmm0 = COPY killed %27:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %28:gr32 = COPY killed $eax
  %23:gr64 = MOV64ri @.str.4
  %24:gr32 = MOV32ri 42
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax
  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
  %17:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %17:gr64
  $xmm0 = COPY killed %21:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %19:gr32 = COPY killed $eax
  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  %13:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %13:gr64
  $esi = COPY killed %16:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %15:gr32 = COPY killed $eax
  %10:gr64 = MOV64ri @.str.7
  %11:gr32 = MOV32ri 500
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax
  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY killed %0:gr64
192B	  $rsi = COPY killed %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = COPY killed %56:fr64
448B	  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
464B	  %46:fr64 = COPY killed %51:fr64
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
528B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
544B	  %43:gr32 = COPY killed %44:gr32
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY killed %40:gr32
688B	  $esi = COPY killed %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY killed %29:gr64
880B	  $esi = COPY killed %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY killed %26:gr64
1024B	  $xmm0 = COPY killed %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1120B	  %24:gr32 = MOV32ri 42
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY killed %23:gr64
1168B	  $esi = COPY killed %24:gr32
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY killed %17:gr64
1328B	  $xmm0 = COPY killed %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY killed %13:gr64
1472B	  $esi = COPY killed %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1568B	  %11:gr32 = MOV32ri 500
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY killed %10:gr64
1616B	  $esi = COPY killed %11:gr32
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1696B	  %9:gr32 = MOV32r0 implicit-def dead $eflags
1712B	  $eax = COPY killed %9:gr32
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY killed %0:gr64
192B	  $rsi = COPY killed %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr killed %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = COPY killed %56:fr64
448B	  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), killed %50:fr64, implicit $mxcsr
464B	  %46:fr64 = COPY killed %51:fr64
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), killed %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr killed %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed %47:fr32 :: (store (s32) into %ir.17)
528B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
544B	  %43:gr32 = COPY killed %44:gr32
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY killed %40:gr32
688B	  $esi = COPY killed %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY killed %29:gr64
880B	  $esi = COPY killed %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY killed %26:gr64
1024B	  $xmm0 = COPY killed %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1120B	  %24:gr32 = MOV32ri 42
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY killed %23:gr64
1168B	  $esi = COPY killed %24:gr32
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr killed %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY killed %17:gr64
1328B	  $xmm0 = COPY killed %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY killed %13:gr64
1472B	  $esi = COPY killed %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1568B	  %11:gr32 = MOV32ri 500
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY killed %10:gr64
1616B	  $esi = COPY killed %11:gr32
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1696B	  %9:gr32 = MOV32r0 implicit-def dead $eflags
1712B	  $eax = COPY killed %9:gr32
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = COPY %56:fr64
448B	  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), %50:fr64, implicit $mxcsr
464B	  %46:fr64 = COPY %51:fr64
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
544B	  %43:gr32 = COPY %44:gr32
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1120B	  %24:gr32 = MOV32ri 42
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = COPY %24:gr32
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1568B	  %11:gr32 = MOV32ri 500
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = COPY %11:gr32
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1696B	  %9:gr32 = MOV32r0 implicit-def dead $eflags
1712B	  $eax = COPY %9:gr32
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %56:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
432B	  %51:fr64 = COPY %56:fr64
448B	  %51:fr64 = nofpexcept MULSDrr %51:fr64(tied-def 0), %50:fr64, implicit $mxcsr
464B	  %46:fr64 = COPY %51:fr64
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %44:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
544B	  %43:gr32 = COPY %44:gr32
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1120B	  %24:gr32 = MOV32ri 42
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = COPY %24:gr32
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1568B	  %11:gr32 = MOV32ri 500
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = COPY %11:gr32
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1696B	  %9:gr32 = MOV32r0 implicit-def dead $eflags
1712B	  $eax = COPY %9:gr32
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY killed $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY killed $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY killed $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY killed $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY killed $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY killed $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY killed $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY killed $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %5:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.6)
64B	  %4:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, %4:fr32 :: (store (s32) into %ir.7)
96B	  %3:fr32 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %3:fr32 :: (store (s32) into %ir.8)
128B	  %0:gr64 = MOV64ri @.str.1
144B	  %1:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  $rdi = COPY %0:gr64
192B	  $rsi = COPY %1:gr64
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  dead %2:gr32 = COPY $eax
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm %8:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %46:fr64 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  %54:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  %53:fr64 = CVTSS2SDrr %54:fr32, implicit $mxcsr
416B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  %46:fr64 = nofpexcept MULSDrr %46:fr64(tied-def 0), %50:fr64, implicit $mxcsr
480B	  %46:fr64 = nofpexcept ADDSDrr %46:fr64(tied-def 0), %53:fr64, implicit $mxcsr
496B	  %47:fr32 = CVTSD2SSrr %46:fr64, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, %47:fr32 :: (store (s32) into %ir.17)
528B	  %43:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %43:gr32 = ADD32ri8 %43:gr32(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  %40:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  %38:gr32 = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  $edi = COPY %40:gr32
688B	  $esi = COPY %38:gr32
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %36:gr32 = COPY $eax
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %36:gr32 :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  %32:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  %29:gr64 = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %29:gr64
880B	  $esi = COPY %32:gr32
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
944B	  dead %31:gr32 = COPY $eax
960B	  %26:gr64 = MOV64ri @.str.3
976B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $rdi = COPY %26:gr64
1024B	  $xmm0 = COPY %27:fr64
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1088B	  dead %28:gr32 = COPY $eax
1104B	  %23:gr64 = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1152B	  $rdi = COPY %23:gr64
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1232B	  dead %25:gr32 = COPY $eax
1248B	  %22:fr32 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  %21:fr64 = CVTSS2SDrr %22:fr32, implicit $mxcsr
1280B	  %17:gr64 = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1312B	  $rdi = COPY %17:gr64
1328B	  $xmm0 = COPY %21:fr64
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  dead %19:gr32 = COPY $eax
1408B	  %16:gr32 = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  %13:gr64 = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1456B	  $rdi = COPY %13:gr64
1472B	  $esi = COPY %16:gr32
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  dead %15:gr32 = COPY $eax
1552B	  %10:gr64 = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1600B	  $rdi = COPY %10:gr64
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1680B	  dead %12:gr32 = COPY $eax
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
48B	  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
64B	  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
80B	  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
96B	  renamable $xmm0 = FsFLD0SS
112B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
128B	  renamable $rdi = MOV64ri @.str.1
144B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  $al = MOV8ri 0
224B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
240B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
320B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
336B	  JCC_1 %bb.3, 15, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
384B	  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
400B	  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
416B	  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
448B	  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
480B	  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
512B	  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
528B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
576B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
592B	  JMP_1 %bb.1

608B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

624B	  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
640B	  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
704B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
816B	  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
832B	  renamable $rdi = MOV64ri @.str.2
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
896B	  $al = MOV8ri 0
912B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  renamable $rdi = MOV64ri @.str.3
976B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  $al = MOV8ri 1
1056B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1104B	  renamable $rdi = MOV64ri @.str.4
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1168B	  $esi = MOV32ri 42
1184B	  $al = MOV8ri 0
1200B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1248B	  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
1264B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
1280B	  renamable $rdi = MOV64ri @.str.5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1344B	  $al = MOV8ri 1
1360B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1408B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
1424B	  renamable $rdi = MOV64ri @.str.6
1440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1488B	  $al = MOV8ri 0
1504B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1552B	  renamable $rdi = MOV64ri @.str.7
1584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1616B	  $esi = MOV32ri 500
1632B	  $al = MOV8ri 0
1648B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $eax = MOV32r0 implicit-def dead $eflags
1728B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr %stack.1, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr %stack.1, 1, $noreg, 4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.1, 1, $noreg, 8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm %stack.1, 1, $noreg, 4, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSSrm_alt %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = FsFLD0SS
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-36]
  fi#1: size=12, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 7.000000e+00, align=4
  cp#1: 5.000000e+00, align=4
  cp#2: 3.140000e+00, align=8
  cp#3: 1.000000e-01, align=8

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -28, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.1, $noreg
  MOVSSmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.6)
  renamable $xmm0 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSSmr $rbp, 1, $noreg, -12, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.7)
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.8)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $xmm0 = CVTSI2SDrm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $xmm1 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.17)
  renamable $xmm1 = CVTSS2SDrr killed renamable $xmm1, implicit $mxcsr
  renamable $xmm2 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load (s64) from constant-pool)
  renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
  renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.17)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $edi = CVTTSS2SIrm $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s32) from %ir.25)
  renamable $esi = CVTTSS2SIrm $rbp, 1, $noreg, -12, $noreg, implicit $mxcsr :: (load (s32) from %ir.28)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  CALL64pcrel32 @print_message, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.5)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.3
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $rdi = MOV64ri @.str.4
  $esi = MOV32ri 42
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $xmm0 = MOVSSrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.36)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $esi = MOV32rm $noreg, 1, $noreg, @qj, $noreg :: (load (s32) from @qj)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.7
  $esi = MOV32ri 500
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

